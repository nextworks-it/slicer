/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.eveportal.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * OnboardExpDescriptorRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-26T20:09:54.213Z")



public class OnboardExpDescriptorRequest {
  @SerializedName("contextDetails")
  private List<BlueprintUserInformation> contextDetails = null;

  @SerializedName("experimentBlueprintId")
  private String experimentBlueprintId = null;

  @SerializedName("kpiThresholds")
  private Map<String, KpiThreshold> kpiThresholds = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("public")
  private Boolean _public = null;

  @SerializedName("tenantId")
  private String tenantId = null;

  @SerializedName("testCaseConfiguration")
  private List<BlueprintUserInformation> testCaseConfiguration = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("vsDescriptor")
  private VsDescriptor vsDescriptor = null;

  public OnboardExpDescriptorRequest contextDetails(List<BlueprintUserInformation> contextDetails) {
    this.contextDetails = contextDetails;
    return this;
  }

  public OnboardExpDescriptorRequest addContextDetailsItem(BlueprintUserInformation contextDetailsItem) {
    if (this.contextDetails == null) {
      this.contextDetails = new ArrayList<BlueprintUserInformation>();
    }
    this.contextDetails.add(contextDetailsItem);
    return this;
  }

   /**
   * Get contextDetails
   * @return contextDetails
  **/
  @ApiModelProperty(value = "")
  public List<BlueprintUserInformation> getContextDetails() {
    return contextDetails;
  }

  public void setContextDetails(List<BlueprintUserInformation> contextDetails) {
    this.contextDetails = contextDetails;
  }

  public OnboardExpDescriptorRequest experimentBlueprintId(String experimentBlueprintId) {
    this.experimentBlueprintId = experimentBlueprintId;
    return this;
  }

   /**
   * Get experimentBlueprintId
   * @return experimentBlueprintId
  **/
  @ApiModelProperty(value = "")
  public String getExperimentBlueprintId() {
    return experimentBlueprintId;
  }

  public void setExperimentBlueprintId(String experimentBlueprintId) {
    this.experimentBlueprintId = experimentBlueprintId;
  }

  public OnboardExpDescriptorRequest kpiThresholds(Map<String, KpiThreshold> kpiThresholds) {
    this.kpiThresholds = kpiThresholds;
    return this;
  }

  public OnboardExpDescriptorRequest putKpiThresholdsItem(String key, KpiThreshold kpiThresholdsItem) {
    if (this.kpiThresholds == null) {
      this.kpiThresholds = new HashMap<String, KpiThreshold>();
    }
    this.kpiThresholds.put(key, kpiThresholdsItem);
    return this;
  }

   /**
   * Get kpiThresholds
   * @return kpiThresholds
  **/
  @ApiModelProperty(value = "")
  public Map<String, KpiThreshold> getKpiThresholds() {
    return kpiThresholds;
  }

  public void setKpiThresholds(Map<String, KpiThreshold> kpiThresholds) {
    this.kpiThresholds = kpiThresholds;
  }

  public OnboardExpDescriptorRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OnboardExpDescriptorRequest _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @ApiModelProperty(value = "")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  public OnboardExpDescriptorRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @ApiModelProperty(value = "")
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public OnboardExpDescriptorRequest testCaseConfiguration(List<BlueprintUserInformation> testCaseConfiguration) {
    this.testCaseConfiguration = testCaseConfiguration;
    return this;
  }

  public OnboardExpDescriptorRequest addTestCaseConfigurationItem(BlueprintUserInformation testCaseConfigurationItem) {
    if (this.testCaseConfiguration == null) {
      this.testCaseConfiguration = new ArrayList<BlueprintUserInformation>();
    }
    this.testCaseConfiguration.add(testCaseConfigurationItem);
    return this;
  }

   /**
   * Get testCaseConfiguration
   * @return testCaseConfiguration
  **/
  @ApiModelProperty(value = "")
  public List<BlueprintUserInformation> getTestCaseConfiguration() {
    return testCaseConfiguration;
  }

  public void setTestCaseConfiguration(List<BlueprintUserInformation> testCaseConfiguration) {
    this.testCaseConfiguration = testCaseConfiguration;
  }

  public OnboardExpDescriptorRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public OnboardExpDescriptorRequest vsDescriptor(VsDescriptor vsDescriptor) {
    this.vsDescriptor = vsDescriptor;
    return this;
  }

   /**
   * Get vsDescriptor
   * @return vsDescriptor
  **/
  @ApiModelProperty(value = "")
  public VsDescriptor getVsDescriptor() {
    return vsDescriptor;
  }

  public void setVsDescriptor(VsDescriptor vsDescriptor) {
    this.vsDescriptor = vsDescriptor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnboardExpDescriptorRequest onboardExpDescriptorRequest = (OnboardExpDescriptorRequest) o;
    return Objects.equals(this.contextDetails, onboardExpDescriptorRequest.contextDetails) &&
        Objects.equals(this.experimentBlueprintId, onboardExpDescriptorRequest.experimentBlueprintId) &&
        Objects.equals(this.kpiThresholds, onboardExpDescriptorRequest.kpiThresholds) &&
        Objects.equals(this.name, onboardExpDescriptorRequest.name) &&
        Objects.equals(this._public, onboardExpDescriptorRequest._public) &&
        Objects.equals(this.tenantId, onboardExpDescriptorRequest.tenantId) &&
        Objects.equals(this.testCaseConfiguration, onboardExpDescriptorRequest.testCaseConfiguration) &&
        Objects.equals(this.version, onboardExpDescriptorRequest.version) &&
        Objects.equals(this.vsDescriptor, onboardExpDescriptorRequest.vsDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextDetails, experimentBlueprintId, kpiThresholds, name, _public, tenantId, testCaseConfiguration, version, vsDescriptor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnboardExpDescriptorRequest {\n");
    
    sb.append("    contextDetails: ").append(toIndentedString(contextDetails)).append("\n");
    sb.append("    experimentBlueprintId: ").append(toIndentedString(experimentBlueprintId)).append("\n");
    sb.append("    kpiThresholds: ").append(toIndentedString(kpiThresholds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    testCaseConfiguration: ").append(toIndentedString(testCaseConfiguration)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vsDescriptor: ").append(toIndentedString(vsDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

