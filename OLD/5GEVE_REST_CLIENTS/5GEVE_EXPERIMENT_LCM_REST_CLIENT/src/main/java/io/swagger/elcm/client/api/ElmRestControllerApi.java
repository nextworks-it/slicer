/*
 * 5GEVE Experiment LCM
 * The API of the 5GEVE Experiment Lifecycle Manager
 *
 * OpenAPI spec version: 1.0
 * Contact: info@nextworks.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.elcm.client.api;

import io.swagger.elcm.client.ApiCallback;
import io.swagger.elcm.client.ApiClient;
import io.swagger.elcm.client.ApiException;
import io.swagger.elcm.client.ApiResponse;
import io.swagger.elcm.client.Configuration;
import io.swagger.elcm.client.Pair;
import io.swagger.elcm.client.ProgressRequestBody;
import io.swagger.elcm.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.elcm.client.model.ExecuteExperimentRequest;
import io.swagger.elcm.client.model.Experiment;
import io.swagger.elcm.client.model.ExperimentSchedulingRequest;
import io.swagger.elcm.client.model.ModifyExperimentTimeslotRequest;
import io.swagger.elcm.client.model.UpdateExperimentStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ElmRestControllerApi {
    private ApiClient apiClient;

    public ElmRestControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ElmRestControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createExperimentUsingPOST
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExperimentUsingPOSTCall(ExperimentSchedulingRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExperimentUsingPOSTValidateBeforeCall(ExperimentSchedulingRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createExperimentUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createExperimentUsingPOSTCall(request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request experiment schedule
     * 
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String createExperimentUsingPOST(ExperimentSchedulingRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        ApiResponse<String> resp = createExperimentUsingPOSTWithHttpInfo(request, authenticated, authorities0Authority);
        return resp.getData();
    }

    /**
     * Request experiment schedule
     * 
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> createExperimentUsingPOSTWithHttpInfo(ExperimentSchedulingRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentUsingPOSTValidateBeforeCall(request, authenticated, authorities0Authority, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request experiment schedule (asynchronously)
     * 
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentUsingPOSTAsync(ExperimentSchedulingRequest request, Boolean authenticated, String authorities0Authority, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentUsingPOSTValidateBeforeCall(request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperimentUsingDELETE
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentUsingDELETECall(String expId, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment/{expId}"
            .replaceAll("\\{" + "expId" + "\\}", apiClient.escapeString(expId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentUsingDELETEValidateBeforeCall(String expId, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'expId' is set
        if (expId == null) {
            throw new ApiException("Missing the required parameter 'expId' when calling deleteExperimentUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentUsingDELETECall(expId, authenticated, authorities0Authority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete experiment
     * 
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteExperimentUsingDELETE(String expId, Boolean authenticated, String authorities0Authority) throws ApiException {
        ApiResponse<Object> resp = deleteExperimentUsingDELETEWithHttpInfo(expId, authenticated, authorities0Authority);
        return resp.getData();
    }

    /**
     * Delete experiment
     * 
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteExperimentUsingDELETEWithHttpInfo(String expId, Boolean authenticated, String authorities0Authority) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentUsingDELETEValidateBeforeCall(expId, authenticated, authorities0Authority, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete experiment (asynchronously)
     * 
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentUsingDELETEAsync(String expId, Boolean authenticated, String authorities0Authority, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentUsingDELETEValidateBeforeCall(expId, authenticated, authorities0Authority, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllExperimentsUsingGET
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param expDId expDId (optional)
     * @param expId expId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllExperimentsUsingGETCall(Boolean authenticated, String authorities0Authority, String expDId, String expId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));
        if (expDId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expDId", expDId));
        if (expId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expId", expId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllExperimentsUsingGETValidateBeforeCall(Boolean authenticated, String authorities0Authority, String expDId, String expId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllExperimentsUsingGETCall(authenticated, authorities0Authority, expDId, expId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve list of experiments
     * 
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param expDId expDId (optional)
     * @param expId expId (optional)
     * @return List&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Experiment> getAllExperimentsUsingGET(Boolean authenticated, String authorities0Authority, String expDId, String expId) throws ApiException {
        ApiResponse<List<Experiment>> resp = getAllExperimentsUsingGETWithHttpInfo(authenticated, authorities0Authority, expDId, expId);
        return resp.getData();
    }

    /**
     * Retrieve list of experiments
     * 
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param expDId expDId (optional)
     * @param expId expId (optional)
     * @return ApiResponse&lt;List&lt;Experiment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Experiment>> getAllExperimentsUsingGETWithHttpInfo(Boolean authenticated, String authorities0Authority, String expDId, String expId) throws ApiException {
        com.squareup.okhttp.Call call = getAllExperimentsUsingGETValidateBeforeCall(authenticated, authorities0Authority, expDId, expId, null, null);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of experiments (asynchronously)
     * 
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param expDId expDId (optional)
     * @param expId expId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllExperimentsUsingGETAsync(Boolean authenticated, String authorities0Authority, String expDId, String expId, final ApiCallback<List<Experiment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllExperimentsUsingGETValidateBeforeCall(authenticated, authorities0Authority, expDId, expId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestExperimentActionUsingPOST
     * @param action action (required)
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param request request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestExperimentActionUsingPOSTCall(String action, String expId, Boolean authenticated, String authorities0Authority, ExecuteExperimentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment/{expId}/action/{action}"
            .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()))
            .replaceAll("\\{" + "expId" + "\\}", apiClient.escapeString(expId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestExperimentActionUsingPOSTValidateBeforeCall(String action, String expId, Boolean authenticated, String authorities0Authority, ExecuteExperimentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling requestExperimentActionUsingPOST(Async)");
        }
        
        // verify the required parameter 'expId' is set
        if (expId == null) {
            throw new ApiException("Missing the required parameter 'expId' when calling requestExperimentActionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = requestExperimentActionUsingPOSTCall(action, expId, authenticated, authorities0Authority, request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request experiment action
     * 
     * @param action action (required)
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param request request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestExperimentActionUsingPOST(String action, String expId, Boolean authenticated, String authorities0Authority, ExecuteExperimentRequest request) throws ApiException {
        requestExperimentActionUsingPOSTWithHttpInfo(action, expId, authenticated, authorities0Authority, request);
    }

    /**
     * Request experiment action
     * 
     * @param action action (required)
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param request request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestExperimentActionUsingPOSTWithHttpInfo(String action, String expId, Boolean authenticated, String authorities0Authority, ExecuteExperimentRequest request) throws ApiException {
        com.squareup.okhttp.Call call = requestExperimentActionUsingPOSTValidateBeforeCall(action, expId, authenticated, authorities0Authority, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request experiment action (asynchronously)
     * 
     * @param action action (required)
     * @param expId expId (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param request request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestExperimentActionUsingPOSTAsync(String action, String expId, Boolean authenticated, String authorities0Authority, ExecuteExperimentRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestExperimentActionUsingPOSTValidateBeforeCall(action, expId, authenticated, authorities0Authority, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExperimentStatusUsingPUT
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentStatusUsingPUTCall(String expId, UpdateExperimentStatusRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment/{expId}/status"
            .replaceAll("\\{" + "expId" + "\\}", apiClient.escapeString(expId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentStatusUsingPUTValidateBeforeCall(String expId, UpdateExperimentStatusRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'expId' is set
        if (expId == null) {
            throw new ApiException("Missing the required parameter 'expId' when calling updateExperimentStatusUsingPUT(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateExperimentStatusUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperimentStatusUsingPUTCall(expId, request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update experiment status
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExperimentStatusUsingPUT(String expId, UpdateExperimentStatusRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        updateExperimentStatusUsingPUTWithHttpInfo(expId, request, authenticated, authorities0Authority);
    }

    /**
     * Update experiment status
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExperimentStatusUsingPUTWithHttpInfo(String expId, UpdateExperimentStatusRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentStatusUsingPUTValidateBeforeCall(expId, request, authenticated, authorities0Authority, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update experiment status (asynchronously)
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentStatusUsingPUTAsync(String expId, UpdateExperimentStatusRequest request, Boolean authenticated, String authorities0Authority, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentStatusUsingPUTValidateBeforeCall(expId, request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExperimentTimeslotUsingPUT
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentTimeslotUsingPUTCall(String expId, ModifyExperimentTimeslotRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/portal/elm/experiment/{expId}/timeslot"
            .replaceAll("\\{" + "expId" + "\\}", apiClient.escapeString(expId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticated", authenticated));
        if (authorities0Authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorities[0].authority", authorities0Authority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentTimeslotUsingPUTValidateBeforeCall(String expId, ModifyExperimentTimeslotRequest request, Boolean authenticated, String authorities0Authority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'expId' is set
        if (expId == null) {
            throw new ApiException("Missing the required parameter 'expId' when calling updateExperimentTimeslotUsingPUT(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateExperimentTimeslotUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperimentTimeslotUsingPUTCall(expId, request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update experiment timeslot
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExperimentTimeslotUsingPUT(String expId, ModifyExperimentTimeslotRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        updateExperimentTimeslotUsingPUTWithHttpInfo(expId, request, authenticated, authorities0Authority);
    }

    /**
     * Update experiment timeslot
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExperimentTimeslotUsingPUTWithHttpInfo(String expId, ModifyExperimentTimeslotRequest request, Boolean authenticated, String authorities0Authority) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentTimeslotUsingPUTValidateBeforeCall(expId, request, authenticated, authorities0Authority, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update experiment timeslot (asynchronously)
     * 
     * @param expId expId (required)
     * @param request request (required)
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentTimeslotUsingPUTAsync(String expId, ModifyExperimentTimeslotRequest request, Boolean authenticated, String authorities0Authority, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentTimeslotUsingPUTValidateBeforeCall(expId, request, authenticated, authorities0Authority, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
