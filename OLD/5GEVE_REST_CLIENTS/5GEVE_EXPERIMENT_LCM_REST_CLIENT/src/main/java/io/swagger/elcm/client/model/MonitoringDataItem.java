/*
 * 5GEVE Experiment LCM
 * The API of the 5GEVE Experiment Lifecycle Manager
 *
 * OpenAPI spec version: 1.0
 * Contact: info@nextworks.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.elcm.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MonitoringDataItem
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-27T08:54:11.910Z")



public class MonitoringDataItem {
  @SerializedName("dataItemString")
  private String dataItemString = null;

  @SerializedName("expId")
  private String expId = null;

  @SerializedName("mdName")
  private String mdName = null;

  /**
   * Gets or Sets mdt
   */
  @JsonAdapter(MdtEnum.Adapter.class)
  public enum MdtEnum {
    APPLICATION_METRIC("APPLICATION_METRIC"),
    
    INFRASTRUCTURE_METRIC("INFRASTRUCTURE_METRIC"),
    
    KPI("KPI"),
    
    RESULT("RESULT");

    private String value;

    MdtEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MdtEnum fromValue(String text) {
      for (MdtEnum b : MdtEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MdtEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MdtEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MdtEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MdtEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mdt")
  private MdtEnum mdt = null;

  /**
   * Gets or Sets metricCollectionType
   */
  @JsonAdapter(MetricCollectionTypeEnum.Adapter.class)
  public enum MetricCollectionTypeEnum {
    CUMULATIVE("CUMULATIVE"),
    
    DELTA("DELTA"),
    
    GAUGE("GAUGE");

    private String value;

    MetricCollectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricCollectionTypeEnum fromValue(String text) {
      for (MetricCollectionTypeEnum b : MetricCollectionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MetricCollectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricCollectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricCollectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MetricCollectionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("metricCollectionType")
  private MetricCollectionTypeEnum metricCollectionType = null;

  /**
   * Gets or Sets metricGraphType
   */
  @JsonAdapter(MetricGraphTypeEnum.Adapter.class)
  public enum MetricGraphTypeEnum {
    LINE("LINE"),
    
    PIE("PIE"),
    
    COUNTER("COUNTER"),
    
    GAUGE("GAUGE");

    private String value;

    MetricGraphTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricGraphTypeEnum fromValue(String text) {
      for (MetricGraphTypeEnum b : MetricGraphTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MetricGraphTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricGraphTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricGraphTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MetricGraphTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("metricGraphType")
  private MetricGraphTypeEnum metricGraphType = null;

  @SerializedName("metricInterval")
  private String metricInterval = null;

  @SerializedName("metricName")
  private String metricName = null;

  @SerializedName("metricUnit")
  private String metricUnit = null;

  /**
   * Gets or Sets site
   */
  @JsonAdapter(SiteEnum.Adapter.class)
  public enum SiteEnum {
    ITALY_TURIN("ITALY_TURIN"),
    
    SPAIN_5TONIC("SPAIN_5TONIC"),
    
    FRANCE_PARIS("FRANCE_PARIS"),
    
    FRANCE_NICE("FRANCE_NICE"),
    
    FRANCE_RENNES("FRANCE_RENNES"),
    
    GREECE_ATHENS("GREECE_ATHENS");

    private String value;

    SiteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SiteEnum fromValue(String text) {
      for (SiteEnum b : SiteEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SiteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SiteEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SiteEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("site")
  private SiteEnum site = null;

  public MonitoringDataItem dataItemString(String dataItemString) {
    this.dataItemString = dataItemString;
    return this;
  }

   /**
   * Get dataItemString
   * @return dataItemString
  **/
  @ApiModelProperty(value = "")
  public String getDataItemString() {
    return dataItemString;
  }

  public void setDataItemString(String dataItemString) {
    this.dataItemString = dataItemString;
  }

  public MonitoringDataItem expId(String expId) {
    this.expId = expId;
    return this;
  }

   /**
   * Get expId
   * @return expId
  **/
  @ApiModelProperty(value = "")
  public String getExpId() {
    return expId;
  }

  public void setExpId(String expId) {
    this.expId = expId;
  }

  public MonitoringDataItem mdName(String mdName) {
    this.mdName = mdName;
    return this;
  }

   /**
   * Get mdName
   * @return mdName
  **/
  @ApiModelProperty(value = "")
  public String getMdName() {
    return mdName;
  }

  public void setMdName(String mdName) {
    this.mdName = mdName;
  }

  public MonitoringDataItem mdt(MdtEnum mdt) {
    this.mdt = mdt;
    return this;
  }

   /**
   * Get mdt
   * @return mdt
  **/
  @ApiModelProperty(value = "")
  public MdtEnum getMdt() {
    return mdt;
  }

  public void setMdt(MdtEnum mdt) {
    this.mdt = mdt;
  }

  public MonitoringDataItem metricCollectionType(MetricCollectionTypeEnum metricCollectionType) {
    this.metricCollectionType = metricCollectionType;
    return this;
  }

   /**
   * Get metricCollectionType
   * @return metricCollectionType
  **/
  @ApiModelProperty(value = "")
  public MetricCollectionTypeEnum getMetricCollectionType() {
    return metricCollectionType;
  }

  public void setMetricCollectionType(MetricCollectionTypeEnum metricCollectionType) {
    this.metricCollectionType = metricCollectionType;
  }

  public MonitoringDataItem metricGraphType(MetricGraphTypeEnum metricGraphType) {
    this.metricGraphType = metricGraphType;
    return this;
  }

   /**
   * Get metricGraphType
   * @return metricGraphType
  **/
  @ApiModelProperty(value = "")
  public MetricGraphTypeEnum getMetricGraphType() {
    return metricGraphType;
  }

  public void setMetricGraphType(MetricGraphTypeEnum metricGraphType) {
    this.metricGraphType = metricGraphType;
  }

  public MonitoringDataItem metricInterval(String metricInterval) {
    this.metricInterval = metricInterval;
    return this;
  }

   /**
   * Get metricInterval
   * @return metricInterval
  **/
  @ApiModelProperty(value = "")
  public String getMetricInterval() {
    return metricInterval;
  }

  public void setMetricInterval(String metricInterval) {
    this.metricInterval = metricInterval;
  }

  public MonitoringDataItem metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

   /**
   * Get metricName
   * @return metricName
  **/
  @ApiModelProperty(value = "")
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }

  public MonitoringDataItem metricUnit(String metricUnit) {
    this.metricUnit = metricUnit;
    return this;
  }

   /**
   * Get metricUnit
   * @return metricUnit
  **/
  @ApiModelProperty(value = "")
  public String getMetricUnit() {
    return metricUnit;
  }

  public void setMetricUnit(String metricUnit) {
    this.metricUnit = metricUnit;
  }

  public MonitoringDataItem site(SiteEnum site) {
    this.site = site;
    return this;
  }

   /**
   * Get site
   * @return site
  **/
  @ApiModelProperty(value = "")
  public SiteEnum getSite() {
    return site;
  }

  public void setSite(SiteEnum site) {
    this.site = site;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringDataItem monitoringDataItem = (MonitoringDataItem) o;
    return Objects.equals(this.dataItemString, monitoringDataItem.dataItemString) &&
        Objects.equals(this.expId, monitoringDataItem.expId) &&
        Objects.equals(this.mdName, monitoringDataItem.mdName) &&
        Objects.equals(this.mdt, monitoringDataItem.mdt) &&
        Objects.equals(this.metricCollectionType, monitoringDataItem.metricCollectionType) &&
        Objects.equals(this.metricGraphType, monitoringDataItem.metricGraphType) &&
        Objects.equals(this.metricInterval, monitoringDataItem.metricInterval) &&
        Objects.equals(this.metricName, monitoringDataItem.metricName) &&
        Objects.equals(this.metricUnit, monitoringDataItem.metricUnit) &&
        Objects.equals(this.site, monitoringDataItem.site);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataItemString, expId, mdName, mdt, metricCollectionType, metricGraphType, metricInterval, metricName, metricUnit, site);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringDataItem {\n");
    
    sb.append("    dataItemString: ").append(toIndentedString(dataItemString)).append("\n");
    sb.append("    expId: ").append(toIndentedString(expId)).append("\n");
    sb.append("    mdName: ").append(toIndentedString(mdName)).append("\n");
    sb.append("    mdt: ").append(toIndentedString(mdt)).append("\n");
    sb.append("    metricCollectionType: ").append(toIndentedString(metricCollectionType)).append("\n");
    sb.append("    metricGraphType: ").append(toIndentedString(metricGraphType)).append("\n");
    sb.append("    metricInterval: ").append(toIndentedString(metricInterval)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricUnit: ").append(toIndentedString(metricUnit)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

