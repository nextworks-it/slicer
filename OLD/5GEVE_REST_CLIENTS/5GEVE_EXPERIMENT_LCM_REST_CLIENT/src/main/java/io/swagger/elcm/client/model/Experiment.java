/*
 * 5GEVE Experiment LCM
 * The API of the 5GEVE Experiment Lifecycle Manager
 *
 * OpenAPI spec version: 1.0
 * Contact: info@nextworks.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.elcm.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Experiment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-27T08:54:11.910Z")



public class Experiment {
  @SerializedName("currentExecutionId")
  private String currentExecutionId = null;

  @SerializedName("errorMessage")
  private String errorMessage = null;

  @SerializedName("executions")
  private List<ExperimentExecution> executions = null;

  @SerializedName("experimentDescriptorId")
  private String experimentDescriptorId = null;

  @SerializedName("experimentId")
  private String experimentId = null;

  @SerializedName("monitoringKpis")
  private List<MonitoringDataItem> monitoringKpis = null;

  @SerializedName("monitoringMetrics")
  private List<MonitoringDataItem> monitoringMetrics = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nfvNsInstanceId")
  private String nfvNsInstanceId = null;

  @SerializedName("openTicketIds")
  private List<String> openTicketIds = null;

  @SerializedName("sapInfo")
  private List<ExperimentSapInfo> sapInfo = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SCHEDULING("SCHEDULING"),
    
    ACCEPTED("ACCEPTED"),
    
    READY("READY"),
    
    INSTANTIATING("INSTANTIATING"),
    
    INSTANTIATED("INSTANTIATED"),
    
    RUNNING_EXECUTION("RUNNING_EXECUTION"),
    
    TERMINATING("TERMINATING"),
    
    TERMINATED("TERMINATED"),
    
    FAILED("FAILED"),
    
    REFUSED("REFUSED"),
    
    ABORTED("ABORTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Gets or Sets targetSites
   */
  @JsonAdapter(TargetSitesEnum.Adapter.class)
  public enum TargetSitesEnum {
    ITALY_TURIN("ITALY_TURIN"),
    
    SPAIN_5TONIC("SPAIN_5TONIC"),
    
    FRANCE_PARIS("FRANCE_PARIS"),
    
    FRANCE_NICE("FRANCE_NICE"),
    
    FRANCE_RENNES("FRANCE_RENNES"),
    
    GREECE_ATHENS("GREECE_ATHENS");

    private String value;

    TargetSitesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetSitesEnum fromValue(String text) {
      for (TargetSitesEnum b : TargetSitesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TargetSitesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetSitesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetSitesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetSitesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("targetSites")
  private List<TargetSitesEnum> targetSites = null;

  @SerializedName("timeslot")
  private ExperimentExecutionTimeslot timeslot = null;

  @SerializedName("useCase")
  private String useCase = null;

  public Experiment currentExecutionId(String currentExecutionId) {
    this.currentExecutionId = currentExecutionId;
    return this;
  }

   /**
   * Get currentExecutionId
   * @return currentExecutionId
  **/
  @ApiModelProperty(value = "")
  public String getCurrentExecutionId() {
    return currentExecutionId;
  }

  public void setCurrentExecutionId(String currentExecutionId) {
    this.currentExecutionId = currentExecutionId;
  }

  public Experiment errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @ApiModelProperty(value = "")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public Experiment executions(List<ExperimentExecution> executions) {
    this.executions = executions;
    return this;
  }

  public Experiment addExecutionsItem(ExperimentExecution executionsItem) {
    if (this.executions == null) {
      this.executions = new ArrayList<ExperimentExecution>();
    }
    this.executions.add(executionsItem);
    return this;
  }

   /**
   * Get executions
   * @return executions
  **/
  @ApiModelProperty(value = "")
  public List<ExperimentExecution> getExecutions() {
    return executions;
  }

  public void setExecutions(List<ExperimentExecution> executions) {
    this.executions = executions;
  }

  public Experiment experimentDescriptorId(String experimentDescriptorId) {
    this.experimentDescriptorId = experimentDescriptorId;
    return this;
  }

   /**
   * Get experimentDescriptorId
   * @return experimentDescriptorId
  **/
  @ApiModelProperty(value = "")
  public String getExperimentDescriptorId() {
    return experimentDescriptorId;
  }

  public void setExperimentDescriptorId(String experimentDescriptorId) {
    this.experimentDescriptorId = experimentDescriptorId;
  }

  public Experiment experimentId(String experimentId) {
    this.experimentId = experimentId;
    return this;
  }

   /**
   * Get experimentId
   * @return experimentId
  **/
  @ApiModelProperty(value = "")
  public String getExperimentId() {
    return experimentId;
  }

  public void setExperimentId(String experimentId) {
    this.experimentId = experimentId;
  }

  public Experiment monitoringKpis(List<MonitoringDataItem> monitoringKpis) {
    this.monitoringKpis = monitoringKpis;
    return this;
  }

  public Experiment addMonitoringKpisItem(MonitoringDataItem monitoringKpisItem) {
    if (this.monitoringKpis == null) {
      this.monitoringKpis = new ArrayList<MonitoringDataItem>();
    }
    this.monitoringKpis.add(monitoringKpisItem);
    return this;
  }

   /**
   * Get monitoringKpis
   * @return monitoringKpis
  **/
  @ApiModelProperty(value = "")
  public List<MonitoringDataItem> getMonitoringKpis() {
    return monitoringKpis;
  }

  public void setMonitoringKpis(List<MonitoringDataItem> monitoringKpis) {
    this.monitoringKpis = monitoringKpis;
  }

  public Experiment monitoringMetrics(List<MonitoringDataItem> monitoringMetrics) {
    this.monitoringMetrics = monitoringMetrics;
    return this;
  }

  public Experiment addMonitoringMetricsItem(MonitoringDataItem monitoringMetricsItem) {
    if (this.monitoringMetrics == null) {
      this.monitoringMetrics = new ArrayList<MonitoringDataItem>();
    }
    this.monitoringMetrics.add(monitoringMetricsItem);
    return this;
  }

   /**
   * Get monitoringMetrics
   * @return monitoringMetrics
  **/
  @ApiModelProperty(value = "")
  public List<MonitoringDataItem> getMonitoringMetrics() {
    return monitoringMetrics;
  }

  public void setMonitoringMetrics(List<MonitoringDataItem> monitoringMetrics) {
    this.monitoringMetrics = monitoringMetrics;
  }

  public Experiment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Experiment nfvNsInstanceId(String nfvNsInstanceId) {
    this.nfvNsInstanceId = nfvNsInstanceId;
    return this;
  }

   /**
   * Get nfvNsInstanceId
   * @return nfvNsInstanceId
  **/
  @ApiModelProperty(value = "")
  public String getNfvNsInstanceId() {
    return nfvNsInstanceId;
  }

  public void setNfvNsInstanceId(String nfvNsInstanceId) {
    this.nfvNsInstanceId = nfvNsInstanceId;
  }

  public Experiment openTicketIds(List<String> openTicketIds) {
    this.openTicketIds = openTicketIds;
    return this;
  }

  public Experiment addOpenTicketIdsItem(String openTicketIdsItem) {
    if (this.openTicketIds == null) {
      this.openTicketIds = new ArrayList<String>();
    }
    this.openTicketIds.add(openTicketIdsItem);
    return this;
  }

   /**
   * Get openTicketIds
   * @return openTicketIds
  **/
  @ApiModelProperty(value = "")
  public List<String> getOpenTicketIds() {
    return openTicketIds;
  }

  public void setOpenTicketIds(List<String> openTicketIds) {
    this.openTicketIds = openTicketIds;
  }

  public Experiment sapInfo(List<ExperimentSapInfo> sapInfo) {
    this.sapInfo = sapInfo;
    return this;
  }

  public Experiment addSapInfoItem(ExperimentSapInfo sapInfoItem) {
    if (this.sapInfo == null) {
      this.sapInfo = new ArrayList<ExperimentSapInfo>();
    }
    this.sapInfo.add(sapInfoItem);
    return this;
  }

   /**
   * Get sapInfo
   * @return sapInfo
  **/
  @ApiModelProperty(value = "")
  public List<ExperimentSapInfo> getSapInfo() {
    return sapInfo;
  }

  public void setSapInfo(List<ExperimentSapInfo> sapInfo) {
    this.sapInfo = sapInfo;
  }

  public Experiment status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Experiment targetSites(List<TargetSitesEnum> targetSites) {
    this.targetSites = targetSites;
    return this;
  }

  public Experiment addTargetSitesItem(TargetSitesEnum targetSitesItem) {
    if (this.targetSites == null) {
      this.targetSites = new ArrayList<TargetSitesEnum>();
    }
    this.targetSites.add(targetSitesItem);
    return this;
  }

   /**
   * Get targetSites
   * @return targetSites
  **/
  @ApiModelProperty(value = "")
  public List<TargetSitesEnum> getTargetSites() {
    return targetSites;
  }

  public void setTargetSites(List<TargetSitesEnum> targetSites) {
    this.targetSites = targetSites;
  }

  public Experiment timeslot(ExperimentExecutionTimeslot timeslot) {
    this.timeslot = timeslot;
    return this;
  }

   /**
   * Get timeslot
   * @return timeslot
  **/
  @ApiModelProperty(value = "")
  public ExperimentExecutionTimeslot getTimeslot() {
    return timeslot;
  }

  public void setTimeslot(ExperimentExecutionTimeslot timeslot) {
    this.timeslot = timeslot;
  }

  public Experiment useCase(String useCase) {
    this.useCase = useCase;
    return this;
  }

   /**
   * Get useCase
   * @return useCase
  **/
  @ApiModelProperty(value = "")
  public String getUseCase() {
    return useCase;
  }

  public void setUseCase(String useCase) {
    this.useCase = useCase;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Experiment experiment = (Experiment) o;
    return Objects.equals(this.currentExecutionId, experiment.currentExecutionId) &&
        Objects.equals(this.errorMessage, experiment.errorMessage) &&
        Objects.equals(this.executions, experiment.executions) &&
        Objects.equals(this.experimentDescriptorId, experiment.experimentDescriptorId) &&
        Objects.equals(this.experimentId, experiment.experimentId) &&
        Objects.equals(this.monitoringKpis, experiment.monitoringKpis) &&
        Objects.equals(this.monitoringMetrics, experiment.monitoringMetrics) &&
        Objects.equals(this.name, experiment.name) &&
        Objects.equals(this.nfvNsInstanceId, experiment.nfvNsInstanceId) &&
        Objects.equals(this.openTicketIds, experiment.openTicketIds) &&
        Objects.equals(this.sapInfo, experiment.sapInfo) &&
        Objects.equals(this.status, experiment.status) &&
        Objects.equals(this.targetSites, experiment.targetSites) &&
        Objects.equals(this.timeslot, experiment.timeslot) &&
        Objects.equals(this.useCase, experiment.useCase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentExecutionId, errorMessage, executions, experimentDescriptorId, experimentId, monitoringKpis, monitoringMetrics, name, nfvNsInstanceId, openTicketIds, sapInfo, status, targetSites, timeslot, useCase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Experiment {\n");
    
    sb.append("    currentExecutionId: ").append(toIndentedString(currentExecutionId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executions: ").append(toIndentedString(executions)).append("\n");
    sb.append("    experimentDescriptorId: ").append(toIndentedString(experimentDescriptorId)).append("\n");
    sb.append("    experimentId: ").append(toIndentedString(experimentId)).append("\n");
    sb.append("    monitoringKpis: ").append(toIndentedString(monitoringKpis)).append("\n");
    sb.append("    monitoringMetrics: ").append(toIndentedString(monitoringMetrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfvNsInstanceId: ").append(toIndentedString(nfvNsInstanceId)).append("\n");
    sb.append("    openTicketIds: ").append(toIndentedString(openTicketIds)).append("\n");
    sb.append("    sapInfo: ").append(toIndentedString(sapInfo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetSites: ").append(toIndentedString(targetSites)).append("\n");
    sb.append("    timeslot: ").append(toIndentedString(timeslot)).append("\n");
    sb.append("    useCase: ").append(toIndentedString(useCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

