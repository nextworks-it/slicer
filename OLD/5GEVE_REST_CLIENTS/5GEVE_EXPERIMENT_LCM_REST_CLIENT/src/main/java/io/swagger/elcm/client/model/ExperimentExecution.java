/*
 * 5GEVE Experiment LCM
 * The API of the 5GEVE Experiment Lifecycle Manager
 *
 * OpenAPI spec version: 1.0
 * Contact: info@nextworks.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.elcm.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ExperimentExecution
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-27T08:54:11.910Z")



public class ExperimentExecution {
  @SerializedName("executionId")
  private String executionId = null;

  @SerializedName("executionName")
  private String executionName = null;

  @SerializedName("reportUrl")
  private String reportUrl = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INIT("INIT"),
    
    CONFIGURING("CONFIGURING"),
    
    RUNNING("RUNNING"),
    
    RUNNING_STEP("RUNNING_STEP"),
    
    PAUSED("PAUSED"),
    
    VALIDATING("VALIDATING"),
    
    COMPLETED("COMPLETED"),
    
    ABORTING("ABORTING"),
    
    ABORTED("ABORTED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("testCaseDescriptorConfiguration")
  private List<TestCaseExecutionConfiguration> testCaseDescriptorConfiguration = null;

  @SerializedName("testCaseResult")
  private Map<String, ExecutionResult> testCaseResult = null;

  public ExperimentExecution executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

   /**
   * Get executionId
   * @return executionId
  **/
  @ApiModelProperty(value = "")
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }

  public ExperimentExecution executionName(String executionName) {
    this.executionName = executionName;
    return this;
  }

   /**
   * Get executionName
   * @return executionName
  **/
  @ApiModelProperty(value = "")
  public String getExecutionName() {
    return executionName;
  }

  public void setExecutionName(String executionName) {
    this.executionName = executionName;
  }

  public ExperimentExecution reportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
    return this;
  }

   /**
   * Get reportUrl
   * @return reportUrl
  **/
  @ApiModelProperty(value = "")
  public String getReportUrl() {
    return reportUrl;
  }

  public void setReportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
  }

  public ExperimentExecution state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ExperimentExecution testCaseDescriptorConfiguration(List<TestCaseExecutionConfiguration> testCaseDescriptorConfiguration) {
    this.testCaseDescriptorConfiguration = testCaseDescriptorConfiguration;
    return this;
  }

  public ExperimentExecution addTestCaseDescriptorConfigurationItem(TestCaseExecutionConfiguration testCaseDescriptorConfigurationItem) {
    if (this.testCaseDescriptorConfiguration == null) {
      this.testCaseDescriptorConfiguration = new ArrayList<TestCaseExecutionConfiguration>();
    }
    this.testCaseDescriptorConfiguration.add(testCaseDescriptorConfigurationItem);
    return this;
  }

   /**
   * Get testCaseDescriptorConfiguration
   * @return testCaseDescriptorConfiguration
  **/
  @ApiModelProperty(value = "")
  public List<TestCaseExecutionConfiguration> getTestCaseDescriptorConfiguration() {
    return testCaseDescriptorConfiguration;
  }

  public void setTestCaseDescriptorConfiguration(List<TestCaseExecutionConfiguration> testCaseDescriptorConfiguration) {
    this.testCaseDescriptorConfiguration = testCaseDescriptorConfiguration;
  }

  public ExperimentExecution testCaseResult(Map<String, ExecutionResult> testCaseResult) {
    this.testCaseResult = testCaseResult;
    return this;
  }

  public ExperimentExecution putTestCaseResultItem(String key, ExecutionResult testCaseResultItem) {
    if (this.testCaseResult == null) {
      this.testCaseResult = new HashMap<String, ExecutionResult>();
    }
    this.testCaseResult.put(key, testCaseResultItem);
    return this;
  }

   /**
   * Get testCaseResult
   * @return testCaseResult
  **/
  @ApiModelProperty(value = "")
  public Map<String, ExecutionResult> getTestCaseResult() {
    return testCaseResult;
  }

  public void setTestCaseResult(Map<String, ExecutionResult> testCaseResult) {
    this.testCaseResult = testCaseResult;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentExecution experimentExecution = (ExperimentExecution) o;
    return Objects.equals(this.executionId, experimentExecution.executionId) &&
        Objects.equals(this.executionName, experimentExecution.executionName) &&
        Objects.equals(this.reportUrl, experimentExecution.reportUrl) &&
        Objects.equals(this.state, experimentExecution.state) &&
        Objects.equals(this.testCaseDescriptorConfiguration, experimentExecution.testCaseDescriptorConfiguration) &&
        Objects.equals(this.testCaseResult, experimentExecution.testCaseResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionId, executionName, reportUrl, state, testCaseDescriptorConfiguration, testCaseResult);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentExecution {\n");
    
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    executionName: ").append(toIndentedString(executionName)).append("\n");
    sb.append("    reportUrl: ").append(toIndentedString(reportUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    testCaseDescriptorConfiguration: ").append(toIndentedString(testCaseDescriptorConfiguration)).append("\n");
    sb.append("    testCaseResult: ").append(toIndentedString(testCaseResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

