/*
 * nsmm
 * NorthBound Interface of Network Service Mesh Manager for 5GZORRO project. The NSMM provides API to manage resouces on the VIMs in order to establish secure intra-domain connections between services. In details: - a set of endpoints, called network-resources, is used to manage network resources on the selected vim to provide an external point of connectivity with a VPN server (wireguard). These network-resources considering OpenStack as a VIM include:   - networks and subnets   - routers and interfaces toward a floating network, to allow the creation of service-access-points   - configuration of the gateway VM included in the NSD, which provides the VPN service - a set of endpoints, called vpn-connections, is design to manage the VPN connections between remote peers.  The NSMM manages resources on a single domain and it is invoked by the slicer of the same domain to create all the network resources before the network service instantiation. After the creation of the network service, it is invoked to configure the gateway. Finally, the ISSM request to the slicer of each domain the creation of a secure channel which is forwarded to the NSMM that creates the VPN connection between the two gateways
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * POST to create all the network resources of a slice on a vim
 */@ApiModel(description = "POST to create all the network resources of a slice on a vim")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2022-03-17T09:30:29.316+01:00[Europe/Rome]")
public class PostSliceResources {

  @SerializedName("networks")
  private List<PostNetwork> networks = new ArrayList<PostNetwork>();
  
  @SerializedName("service-access-points")
  private List<PostSap> serviceAccessPoints = new ArrayList<PostSap>();
  
  @SerializedName("slice-id")
  private String sliceId = null;
  
  @SerializedName("vim-name")
  private String vimName = null;
  
  @SerializedName("exclude-subnet")
  private String excludeSubnet = null;
  
  public PostSliceResources networks(List<PostNetwork> networks) {
    this.networks = networks;
    return this;
  }

  public PostSliceResources addNetworksItem(PostNetwork networksItem) {
    
    this.networks.add(networksItem);
    return this;
  }
  
  /**
  * Name of the networks specified in the NSD
  * @return networks
  **/
  @ApiModelProperty(required = true, value = "Name of the networks specified in the NSD")
  public List<PostNetwork> getNetworks() {
    return networks;
  }
  public void setNetworks(List<PostNetwork> networks) {
    this.networks = networks;
  }
  
  public PostSliceResources serviceAccessPoints(List<PostSap> serviceAccessPoints) {
    this.serviceAccessPoints = serviceAccessPoints;
    return this;
  }

  public PostSliceResources addServiceAccessPointsItem(PostSap serviceAccessPointsItem) {
    
    this.serviceAccessPoints.add(serviceAccessPointsItem);
    return this;
  }
  
  /**
  * SAP specified in the NSD
  * @return serviceAccessPoints
  **/
  @ApiModelProperty(required = true, value = "SAP specified in the NSD")
  public List<PostSap> getServiceAccessPoints() {
    return serviceAccessPoints;
  }
  public void setServiceAccessPoints(List<PostSap> serviceAccessPoints) {
    this.serviceAccessPoints = serviceAccessPoints;
  }
  
  public PostSliceResources sliceId(String sliceId) {
    this.sliceId = sliceId;
    return this;
  }

  
  /**
  * Id of the network slice owning the network resources, assigned by the Slicer
  * @return sliceId
  **/
  @ApiModelProperty(required = true, value = "Id of the network slice owning the network resources, assigned by the Slicer")
  public String getSliceId() {
    return sliceId;
  }
  public void setSliceId(String sliceId) {
    this.sliceId = sliceId;
  }
  
  public PostSliceResources vimName(String vimName) {
    this.vimName = vimName;
    return this;
  }

  
  /**
  * Name of the VIM where to create the requested resources
  * @return vimName
  **/
  @ApiModelProperty(required = true, value = "Name of the VIM where to create the requested resources")
  public String getVimName() {
    return vimName;
  }
  public void setVimName(String vimName) {
    this.vimName = vimName;
  }
  
  public PostSliceResources excludeSubnet(String excludeSubnet) {
    this.excludeSubnet = excludeSubnet;
    return this;
  }

  
  /**
  * Last subnet used by the peer
  * @return excludeSubnet
  **/
  @ApiModelProperty(value = "Last subnet used by the peer")
  public String getExcludeSubnet() {
    return excludeSubnet;
  }
  public void setExcludeSubnet(String excludeSubnet) {
    this.excludeSubnet = excludeSubnet;
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostSliceResources postSliceResources = (PostSliceResources) o;
    return Objects.equals(this.networks, postSliceResources.networks) &&
        Objects.equals(this.serviceAccessPoints, postSliceResources.serviceAccessPoints) &&
        Objects.equals(this.sliceId, postSliceResources.sliceId) &&
        Objects.equals(this.vimName, postSliceResources.vimName) &&
        Objects.equals(this.excludeSubnet, postSliceResources.excludeSubnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networks, serviceAccessPoints, sliceId, vimName, excludeSubnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostSliceResources {\n");

    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    serviceAccessPoints: ").append(toIndentedString(serviceAccessPoints)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    vimName: ").append(toIndentedString(vimName)).append("\n");
    sb.append("    excludeSubnet: ").append(toIndentedString(excludeSubnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



