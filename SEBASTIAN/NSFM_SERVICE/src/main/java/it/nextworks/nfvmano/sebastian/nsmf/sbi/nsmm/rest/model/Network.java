/*
 * nsmm
 * NorthBound Interface of Network Service Mesh Manager for 5GZORRO project. The NSMM provides API to manage resouces on the VIMs in order to establish secure intra-domain connections between services. In details: - a set of endpoints, called network-resources, is used to manage network resources on the selected vim to provide an external point of connectivity with a VPN server (wireguard). These network-resources considering OpenStack as a VIM include:   - networks and subnets   - routers and interfaces toward a floating network, to allow the creation of service-access-points   - configuration of the gateway VM included in the NSD, which provides the VPN service - a set of endpoints, called vpn-connections, is design to manage the VPN connections between remote peers.  The NSMM manages resources on a single domain and it is invoked by the slicer of the same domain to create all the network resources before the network service instantiation. After the creation of the network service, it is invoked to configure the gateway. Finally, the ISSM request to the slicer of each domain the creation of a secure channel which is forwarded to the NSMM that creates the VPN connection between the two gateways
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Network
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2022-03-17T09:30:29.316+01:00[Europe/Rome]")
public class Network {

  @SerializedName("network-name")
  private String networkName = null;
  
  @SerializedName("subnet-cidr")
  private String subnetCidr = null;
  
  public Network networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  
  /**
  * Network name specified in the NSD
  * @return networkName
  **/
  @ApiModelProperty(required = true, value = "Network name specified in the NSD")
  public String getNetworkName() {
    return networkName;
  }
  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }
  
  public Network subnetCidr(String subnetCidr) {
    this.subnetCidr = subnetCidr;
    return this;
  }

  
  /**
  * Network address used for this subnet
  * @return subnetCidr
  **/
  @ApiModelProperty(required = true, value = "Network address used for this subnet")
  public String getSubnetCidr() {
    return subnetCidr;
  }
  public void setSubnetCidr(String subnetCidr) {
    this.subnetCidr = subnetCidr;
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Network network = (Network) o;
    return Objects.equals(this.networkName, network.networkName) &&
        Objects.equals(this.subnetCidr, network.subnetCidr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkName, subnetCidr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Network {\n");

    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    subnetCidr: ").append(toIndentedString(subnetCidr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



