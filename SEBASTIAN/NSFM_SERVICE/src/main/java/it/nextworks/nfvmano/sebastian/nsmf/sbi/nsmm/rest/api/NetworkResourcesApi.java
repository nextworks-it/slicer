/*
 * nsmm
 * NorthBound Interface of Network Service Mesh Manager for 5GZORRO project. The NSMM provides API to manage resouces on the VIMs in order to establish secure intra-domain connections between services. In details: - a set of endpoints, called network-resources, is used to manage network resources on the selected vim to provide an external point of connectivity with a VPN server (wireguard). These network-resources considering OpenStack as a VIM include:   - networks and subnets   - routers and interfaces toward a floating network, to allow the creation of service-access-points   - configuration of the gateway VM included in the NSD, which provides the VPN service - a set of endpoints, called vpn-connections, is design to manage the VPN connections between remote peers.  The NSMM manages resources on a single domain and it is invoked by the slicer of the same domain to create all the network resources before the network service instantiation. After the creation of the network service, it is invoked to configure the gateway. Finally, the ISSM request to the slicer of each domain the creation of a secure channel which is forwarded to the NSMM that creates the VPN connection between the two gateways
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.api;

import com.google.gson.reflect.TypeToken;
import it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.*;
import it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class NetworkResourcesApi {
    private ApiClient apiClient;

    public NetworkResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkResourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    
    /**
     * Build call for netResourcesDelete
     * @param sliceId Id of the network slice owning the network resources (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call netResourcesDeleteCall(String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/net-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sliceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slice-id", sliceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesDeleteValidateBeforeCall(String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling netResourcesDelete(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesDeleteCall(sliceId, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Delete of resources using slice-id
     * It deletes all the network resources of the slice specified in the query parameter.
     * @param sliceId Id of the network slice owning the network resources (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public void netResourcesDelete(String sliceId) throws ApiException {
        netResourcesDeleteWithHttpInfo(sliceId);
    }

    /**
     * Delete of resources using slice-id
     * It deletes all the network resources of the slice specified in the query parameter.
     * @param sliceId Id of the network slice owning the network resources (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Void> netResourcesDeleteWithHttpInfo(String sliceId) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesDeleteValidateBeforeCall(sliceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete of resources using slice-id (asynchronously)
     * It deletes all the network resources of the slice specified in the query parameter.
     * @param sliceId Id of the network slice owning the network resources (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesDeleteAsync(String sliceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesDeleteValidateBeforeCall(sliceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for netResourcesGet
     * @param sliceId Id of the network slice owning the network resources (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesGetCall(String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sliceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slice-id", sliceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesGetValidateBeforeCall(String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {



        com.squareup.okhttp.Call call = netResourcesGetCall(sliceId, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Retrieval of all the set of network resources
     * It retrieves all the network resources created on the selected VIM for all the slices or for a particolar slice using the query parameter
     * @param sliceId Id of the network slice owning the network resources (optional)
     * @return List&lt;SliceResources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public List<SliceResources> netResourcesGet(String sliceId) throws ApiException {
        ApiResponse<List<SliceResources>> resp = netResourcesGetWithHttpInfo(sliceId);
        return resp.getData();
    }

    /**
     * Retrieval of all the set of network resources
     * It retrieves all the network resources created on the selected VIM for all the slices or for a particolar slice using the query parameter
     * @param sliceId Id of the network slice owning the network resources (optional)
     * @return ApiResponse&lt;List&lt;SliceResources&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<List<SliceResources>> netResourcesGetWithHttpInfo(String sliceId) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesGetValidateBeforeCall(sliceId, null, null);
        Type localVarReturnType = new TypeToken<List<SliceResources>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieval of all the set of network resources (asynchronously)
     * It retrieves all the network resources created on the selected VIM for all the slices or for a particolar slice using the query parameter
     * @param sliceId Id of the network slice owning the network resources (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesGetAsync(String sliceId, final ApiCallback<List<SliceResources>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesGetValidateBeforeCall(sliceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SliceResources>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdDelete
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdDelete(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdDeleteCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Removal of a set of network resources using the ID
     * It deletes all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a parameted
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public void netResourcesIdDelete(Integer id) throws ApiException {
        netResourcesIdDeleteWithHttpInfo(id);
    }

    /**
     * Removal of a set of network resources using the ID
     * It deletes all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a parameted
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Void> netResourcesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removal of a set of network resources using the ID (asynchronously)
     * It deletes all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a parameted
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayConfigDelete
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/config"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayConfigDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayConfigDelete(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigDeleteCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Delete of the gateway configuration
     * It requests the removal of the current gateway configuration. The step is async, so the endpoint returns immediately.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public void netResourcesIdGatewayConfigDelete(Integer id) throws ApiException {
        netResourcesIdGatewayConfigDeleteWithHttpInfo(id);
    }

    /**
     * Delete of the gateway configuration
     * It requests the removal of the current gateway configuration. The step is async, so the endpoint returns immediately.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Void> netResourcesIdGatewayConfigDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete of the gateway configuration (asynchronously)
     * It requests the removal of the current gateway configuration. The step is async, so the endpoint returns immediately.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayConfigGet
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/config"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayConfigGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayConfigGet(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigGetCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Retrieval of the current configuration of the gateway
     * It returns the current active configuration of the gateway associated with the set of network resources with id passed in the path parameters
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return Gateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public Gateway netResourcesIdGatewayConfigGet(Integer id) throws ApiException {
        ApiResponse<Gateway> resp = netResourcesIdGatewayConfigGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieval of the current configuration of the gateway
     * It returns the current active configuration of the gateway associated with the set of network resources with id passed in the path parameters
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;Gateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Gateway> netResourcesIdGatewayConfigGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Gateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieval of the current configuration of the gateway (asynchronously)
     * It returns the current active configuration of the gateway associated with the set of network resources with id passed in the path parameters
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigGetAsync(Integer id, final ApiCallback<Gateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayConfigPut
     * @param body  (required)
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigPutCall(PostGateway body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/config"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayConfigPutValidateBeforeCall(PostGateway body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling netResourcesIdGatewayConfigPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayConfigPut(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigPutCall(body, id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Configuration of the gateway
     * It requests the configuration of the gateway of a set of resources identified by the ID in the path parameter. The configuration is an async process, so the endpooint returns immediately a response.
     * @param body  (required)
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return Gateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public Gateway netResourcesIdGatewayConfigPut(PostGateway body, Integer id) throws ApiException {
        ApiResponse<Gateway> resp = netResourcesIdGatewayConfigPutWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Configuration of the gateway
     * It requests the configuration of the gateway of a set of resources identified by the ID in the path parameter. The configuration is an async process, so the endpooint returns immediately a response.
     * @param body  (required)
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;Gateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Gateway> netResourcesIdGatewayConfigPutWithHttpInfo(PostGateway body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigPutValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<Gateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configuration of the gateway (asynchronously)
     * It requests the configuration of the gateway of a set of resources identified by the ID in the path parameter. The configuration is an async process, so the endpooint returns immediately a response.
     * @param body  (required)
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayConfigPutAsync(PostGateway body, Integer id, final ApiCallback<Gateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayConfigPutValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayExternalIpDelete
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/external-ip"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayExternalIpDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayExternalIpDelete(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpDeleteCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Delete of external IP (floating) of the GW
     * It requests the deletion and de-association of the external IP of the gateway
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public void netResourcesIdGatewayExternalIpDelete(Integer id) throws ApiException {
        netResourcesIdGatewayExternalIpDeleteWithHttpInfo(id);
    }

    /**
     * Delete of external IP (floating) of the GW
     * It requests the deletion and de-association of the external IP of the gateway
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<Void> netResourcesIdGatewayExternalIpDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete of external IP (floating) of the GW (asynchronously)
     * It requests the deletion and de-association of the external IP of the gateway
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayExternalIpGet
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/external-ip"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayExternalIpGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayExternalIpGet(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpGetCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Retrival of Gateway external IP
     * It requests the actual external-IP used by the gateway of the slice identified by the ID
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return GatewayIP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public GatewayIP netResourcesIdGatewayExternalIpGet(Integer id) throws ApiException {
        ApiResponse<GatewayIP> resp = netResourcesIdGatewayExternalIpGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrival of Gateway external IP
     * It requests the actual external-IP used by the gateway of the slice identified by the ID
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;GatewayIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<GatewayIP> netResourcesIdGatewayExternalIpGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GatewayIP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrival of Gateway external IP (asynchronously)
     * It requests the actual external-IP used by the gateway of the slice identified by the ID
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpGetAsync(Integer id, final ApiCallback<GatewayIP> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayIP>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGatewayExternalIpPut
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpPutCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}/gateway/external-ip"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGatewayExternalIpPutValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGatewayExternalIpPut(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpPutCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Request to allocate and associate a external IP (floating) for the GW
     * It requests the allocation and association of an external ip to the gateway identified by the slice with ID.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return GatewayIP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public GatewayIP netResourcesIdGatewayExternalIpPut(Integer id) throws ApiException {
        ApiResponse<GatewayIP> resp = netResourcesIdGatewayExternalIpPutWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Request to allocate and associate a external IP (floating) for the GW
     * It requests the allocation and association of an external ip to the gateway identified by the slice with ID.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;GatewayIP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<GatewayIP> netResourcesIdGatewayExternalIpPutWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpPutValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GatewayIP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request to allocate and associate a external IP (floating) for the GW (asynchronously)
     * It requests the allocation and association of an external ip to the gateway identified by the slice with ID.
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGatewayExternalIpPutAsync(Integer id, final ApiCallback<GatewayIP> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGatewayExternalIpPutValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayIP>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesIdGet
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net-resources/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesIdGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling netResourcesIdGet(Async)");
        }


        com.squareup.okhttp.Call call = netResourcesIdGetCall(id, progressListener, progressRequestListener);
        return call;







    }

    /**
     * Retrieval of a set of network resources using ID
     * It retrieves all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a query parameter
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return SliceResources
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public SliceResources netResourcesIdGet(Integer id) throws ApiException {
        ApiResponse<SliceResources> resp = netResourcesIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieval of a set of network resources using ID
     * It retrieves all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a query parameter
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @return ApiResponse&lt;SliceResources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body

     */
    public ApiResponse<SliceResources> netResourcesIdGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SliceResources>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieval of a set of network resources using ID (asynchronously)
     * It retrieves all the network resources of a particular set using its internal unique ID as a path parameter, without specifing the slice-id as a query parameter
     * @param id Unique identifier of the network-resource set request for a slice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object

     */
    public com.squareup.okhttp.Call netResourcesIdGetAsync(Integer id, final ApiCallback<SliceResources> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SliceResources>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for netResourcesPost
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object

     */
    public com.squareup.okhttp.Call netResourcesPostCall(PostSliceResources body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/net-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call netResourcesPostValidateBeforeCall(PostSliceResources body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling netResourcesPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = netResourcesPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Creation of network-resources for a new slice
     * It creates for a new slice all the network resources specified in the body. It can create new networks and service-access-points resources.
     * @param body  (required)
     * @return SliceResources
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public SliceResources netResourcesPost(PostSliceResources body) throws ApiException {
        ApiResponse<SliceResources> resp = netResourcesPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creation of network-resources for a new slice
     * It creates for a new slice all the network resources specified in the body. It can create new networks and service-access-points resources.
     * @param body  (required)
     * @return ApiResponse&lt;SliceResources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<SliceResources> netResourcesPostWithHttpInfo(PostSliceResources body) throws ApiException {
        com.squareup.okhttp.Call call = netResourcesPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SliceResources>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creation of network-resources for a new slice (asynchronously)
     * It creates for a new slice all the network resources specified in the body. It can create new networks and service-access-points resources.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call netResourcesPostAsync(PostSliceResources body, final ApiCallback<SliceResources> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = netResourcesPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SliceResources>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
}
