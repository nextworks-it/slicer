/*
 * nsmm
 * NorthBound Interface of Network Service Mesh Manager for 5GZORRO project. The NSMM provides API to manage resouces on the VIMs in order to establish secure intra-domain connections between services. In details: - a set of endpoints, called network-resources, is used to manage network resources on the selected vim to provide an external point of connectivity with a VPN server (wireguard). These network-resources considering OpenStack as a VIM include:   - networks and subnets   - routers and interfaces toward a floating network, to allow the creation of service-access-points   - configuration of the gateway VM included in the NSD, which provides the VPN service - a set of endpoints, called vpn-connections, is design to manage the VPN connections between remote peers.  The NSMM manages resources on a single domain and it is invoked by the slicer of the same domain to create all the network resources before the network service instantiation. After the creation of the network service, it is invoked to configure the gateway. Finally, the ISSM request to the slicer of each domain the creation of a secure channel which is forwarded to the NSMM that creates the VPN connection between the two gateways
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.nfvmano.sebastian.nsmf.sbi.nsmm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Connection
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2022-03-17T09:30:29.316+01:00[Europe/Rome]")
public class Connection {

  @SerializedName("id")
  private Integer id = null;
  
  @SerializedName("remote-peer-ip")
  private String remotePeerIp = null;
  
  @SerializedName("remote-peer-port")
  private String remotePeerPort = null;
  
  @SerializedName("peer-exposed-subnets")
  private List<String> peerExposedSubnets = new ArrayList<String>();
  
  @SerializedName("public-key")
  private String publicKey = null;
  
  @SerializedName("private-key")
  private String privateKey = null;
  
  public Connection id(Integer id) {
    this.id = id;
    return this;
  }

  
  /**
  * Unique identifier of the connection-id
  * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique identifier of the connection-id")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  
  public Connection remotePeerIp(String remotePeerIp) {
    this.remotePeerIp = remotePeerIp;
    return this;
  }

  
  /**
  * Public IP of the remote peer VPN 
  * @return remotePeerIp
  **/
  @ApiModelProperty(required = true, value = "Public IP of the remote peer VPN ")
  public String getRemotePeerIp() {
    return remotePeerIp;
  }
  public void setRemotePeerIp(String remotePeerIp) {
    this.remotePeerIp = remotePeerIp;
  }
  
  public Connection remotePeerPort(String remotePeerPort) {
    this.remotePeerPort = remotePeerPort;
    return this;
  }

  
  /**
  * Remote peer VPN port
  * @return remotePeerPort
  **/
  @ApiModelProperty(required = true, value = "Remote peer VPN port")
  public String getRemotePeerPort() {
    return remotePeerPort;
  }
  public void setRemotePeerPort(String remotePeerPort) {
    this.remotePeerPort = remotePeerPort;
  }
  
  public Connection peerExposedSubnets(List<String> peerExposedSubnets) {
    this.peerExposedSubnets = peerExposedSubnets;
    return this;
  }

  public Connection addPeerExposedSubnetsItem(String peerExposedSubnetsItem) {
    
    this.peerExposedSubnets.add(peerExposedSubnetsItem);
    return this;
  }
  
  /**
  * Subnets exposed by the peer
  * @return peerExposedSubnets
  **/
  @ApiModelProperty(required = true, value = "Subnets exposed by the peer")
  public List<String> getPeerExposedSubnets() {
    return peerExposedSubnets;
  }
  public void setPeerExposedSubnets(List<String> peerExposedSubnets) {
    this.peerExposedSubnets = peerExposedSubnets;
  }
  
  public Connection publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  
  /**
  * Local Public Key of the peer
  * @return publicKey
  **/
  @ApiModelProperty(value = "Local Public Key of the peer")
  public String getPublicKey() {
    return publicKey;
  }
  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }
  
  public Connection privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  
  /**
  * Local private Key of the peer
  * @return privateKey
  **/
  @ApiModelProperty(value = "Local private Key of the peer")
  public String getPrivateKey() {
    return privateKey;
  }
  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.id, connection.id) &&
        Objects.equals(this.remotePeerIp, connection.remotePeerIp) &&
        Objects.equals(this.remotePeerPort, connection.remotePeerPort) &&
        Objects.equals(this.peerExposedSubnets, connection.peerExposedSubnets) &&
        Objects.equals(this.publicKey, connection.publicKey) &&
        Objects.equals(this.privateKey, connection.privateKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, remotePeerIp, remotePeerPort, peerExposedSubnets, publicKey, privateKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    remotePeerIp: ").append(toIndentedString(remotePeerIp)).append("\n");
    sb.append("    remotePeerPort: ").append(toIndentedString(remotePeerPort)).append("\n");
    sb.append("    peerExposedSubnets: ").append(toIndentedString(peerExposedSubnets)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



