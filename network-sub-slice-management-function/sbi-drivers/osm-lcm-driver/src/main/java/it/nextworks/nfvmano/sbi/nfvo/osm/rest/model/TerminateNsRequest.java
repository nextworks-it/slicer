/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * TerminateNsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-04T13:48:18.253Z[GMT]")
public class TerminateNsRequest {
  @SerializedName("timeout_ns_terminate")
  private Integer timeoutNsTerminate = null;

  @SerializedName("autoremove")
  private Boolean autoremove = null;

  @SerializedName("skip_terminate_primitives")
  private Boolean skipTerminatePrimitives = null;

  public TerminateNsRequest timeoutNsTerminate(Integer timeoutNsTerminate) {
    this.timeoutNsTerminate = timeoutNsTerminate;
    return this;
  }

   /**
   * timeout for terminate operation
   * @return timeoutNsTerminate
  **/
  @Schema(description = "timeout for terminate operation")
  public Integer getTimeoutNsTerminate() {
    return timeoutNsTerminate;
  }

  public void setTimeoutNsTerminate(Integer timeoutNsTerminate) {
    this.timeoutNsTerminate = timeoutNsTerminate;
  }

  public TerminateNsRequest autoremove(Boolean autoremove) {
    this.autoremove = autoremove;
    return this;
  }

   /**
   * remove network service if termination end without error
   * @return autoremove
  **/
  @Schema(description = "remove network service if termination end without error")
  public Boolean isAutoremove() {
    return autoremove;
  }

  public void setAutoremove(Boolean autoremove) {
    this.autoremove = autoremove;
  }

  public TerminateNsRequest skipTerminatePrimitives(Boolean skipTerminatePrimitives) {
    this.skipTerminatePrimitives = skipTerminatePrimitives;
    return this;
  }

   /**
   * Do not execute network service termination primitives
   * @return skipTerminatePrimitives
  **/
  @Schema(description = "Do not execute network service termination primitives")
  public Boolean isSkipTerminatePrimitives() {
    return skipTerminatePrimitives;
  }

  public void setSkipTerminatePrimitives(Boolean skipTerminatePrimitives) {
    this.skipTerminatePrimitives = skipTerminatePrimitives;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminateNsRequest terminateNsRequest = (TerminateNsRequest) o;
    return Objects.equals(this.timeoutNsTerminate, terminateNsRequest.timeoutNsTerminate) &&
        Objects.equals(this.autoremove, terminateNsRequest.autoremove) &&
        Objects.equals(this.skipTerminatePrimitives, terminateNsRequest.skipTerminatePrimitives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeoutNsTerminate, autoremove, skipTerminatePrimitives);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminateNsRequest {\n");
    
    sb.append("    timeoutNsTerminate: ").append(toIndentedString(timeoutNsTerminate)).append("\n");
    sb.append("    autoremove: ").append(toIndentedString(autoremove)).append("\n");
    sb.append("    skipTerminatePrimitives: ").append(toIndentedString(skipTerminatePrimitives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
