/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * InstantiateNsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-04T13:48:18.253Z[GMT]")
public class InstantiateNsRequest {
  @SerializedName("nsName")
  private String nsName = null;

  @SerializedName("nsdId")
  private UUID nsdId = null;

  @SerializedName("vimAccountId")
  private UUID vimAccountId = null;

  @SerializedName("lcmOperationType")
  private String lcmOperationType = null;

  @SerializedName("nsInstanceId")
  private UUID nsInstanceId = null;

  @SerializedName("netsliceInstanceId")
  private UUID netsliceInstanceId = null;

  @SerializedName("nsDescription")
  private String nsDescription = null;

  @SerializedName("wimAccountId")
  private OneOfInstantiateNsRequestWimAccountId wimAccountId = null;

  @SerializedName("additionalParamsForNs")
  private Map<String, String> additionalParamsForNs = null;

  @SerializedName("additionalParamsForVnf")
  private List<InstantiateNsRequestAdditionalParamsForVnf> additionalParamsForVnf = null;

  @SerializedName("ssh_keys")
  private List<String> sshKeys = null;

  @SerializedName("nsr_id")
  private UUID nsrId = null;

  @SerializedName("vduImage")
  private String vduImage = null;

  @SerializedName("placement-engine")
  private String placementEngine = null;

  @SerializedName("placement-constraints")
  private Map<String, Object> placementConstraints = null;

  @SerializedName("k8s-namespace")
  private String k8sNamespace = null;

  @SerializedName("timeout_ns_deploy")
  private Integer timeoutNsDeploy = null;

  @SerializedName("vnf")
  private List<InstantiateNsRequestVnf> vnf = null;

  @SerializedName("vld")
  private List<InstantiateNsRequestVld> vld = null;

  public InstantiateNsRequest nsName(String nsName) {
    this.nsName = nsName;
    return this;
  }

   /**
   * Human-readable name of the NS instance to be created. 
   * @return nsName
  **/
  @Schema(required = true, description = "Human-readable name of the NS instance to be created. ")
  public String getNsName() {
    return nsName;
  }

  public void setNsName(String nsName) {
    this.nsName = nsName;
  }

  public InstantiateNsRequest nsdId(UUID nsdId) {
    this.nsdId = nsdId;
    return this;
  }

   /**
   * Identifier of the NSD that defines the NS instance to be created. 
   * @return nsdId
  **/
  @Schema(required = true, description = "Identifier of the NSD that defines the NS instance to be created. ")
  public UUID getNsdId() {
    return nsdId;
  }

  public void setNsdId(UUID nsdId) {
    this.nsdId = nsdId;
  }

  public InstantiateNsRequest vimAccountId(UUID vimAccountId) {
    this.vimAccountId = vimAccountId;
    return this;
  }

   /**
   * Identifier of the VIM Account where the NS instance shall be created. 
   * @return vimAccountId
  **/
  @Schema(required = true, description = "Identifier of the VIM Account where the NS instance shall be created. ")
  public UUID getVimAccountId() {
    return vimAccountId;
  }

  public void setVimAccountId(UUID vimAccountId) {
    this.vimAccountId = vimAccountId;
  }

  public InstantiateNsRequest lcmOperationType(String lcmOperationType) {
    this.lcmOperationType = lcmOperationType;
    return this;
  }

   /**
   * Get lcmOperationType
   * @return lcmOperationType
  **/
  @Schema(description = "")
  public String getLcmOperationType() {
    return lcmOperationType;
  }

  public void setLcmOperationType(String lcmOperationType) {
    this.lcmOperationType = lcmOperationType;
  }

  public InstantiateNsRequest nsInstanceId(UUID nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
    return this;
  }

   /**
   * Get nsInstanceId
   * @return nsInstanceId
  **/
  @Schema(description = "")
  public UUID getNsInstanceId() {
    return nsInstanceId;
  }

  public void setNsInstanceId(UUID nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
  }

  public InstantiateNsRequest netsliceInstanceId(UUID netsliceInstanceId) {
    this.netsliceInstanceId = netsliceInstanceId;
    return this;
  }

   /**
   * Get netsliceInstanceId
   * @return netsliceInstanceId
  **/
  @Schema(description = "")
  public UUID getNetsliceInstanceId() {
    return netsliceInstanceId;
  }

  public void setNetsliceInstanceId(UUID netsliceInstanceId) {
    this.netsliceInstanceId = netsliceInstanceId;
  }

  public InstantiateNsRequest nsDescription(String nsDescription) {
    this.nsDescription = nsDescription;
    return this;
  }

   /**
   * Get nsDescription
   * @return nsDescription
  **/
  @Schema(description = "")
  public String getNsDescription() {
    return nsDescription;
  }

  public void setNsDescription(String nsDescription) {
    this.nsDescription = nsDescription;
  }

  public InstantiateNsRequest wimAccountId(OneOfInstantiateNsRequestWimAccountId wimAccountId) {
    this.wimAccountId = wimAccountId;
    return this;
  }

   /**
   * Get wimAccountId
   * @return wimAccountId
  **/
  @Schema(description = "")
  public OneOfInstantiateNsRequestWimAccountId getWimAccountId() {
    return wimAccountId;
  }

  public void setWimAccountId(OneOfInstantiateNsRequestWimAccountId wimAccountId) {
    this.wimAccountId = wimAccountId;
  }

  public InstantiateNsRequest additionalParamsForNs(Map<String, String> additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
    return this;
  }

  public InstantiateNsRequest putAdditionalParamsForNsItem(String key, String additionalParamsForNsItem) {
    if (this.additionalParamsForNs == null) {
      this.additionalParamsForNs = new HashMap<String, String>();
    }
    this.additionalParamsForNs.put(key, additionalParamsForNsItem);
    return this;
  }

   /**
   * Get additionalParamsForNs
   * @return additionalParamsForNs
  **/
  @Schema(description = "")
  public Map<String, String> getAdditionalParamsForNs() {
    return additionalParamsForNs;
  }

  public void setAdditionalParamsForNs(Map<String, String> additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
  }

  public InstantiateNsRequest additionalParamsForVnf(List<InstantiateNsRequestAdditionalParamsForVnf> additionalParamsForVnf) {
    this.additionalParamsForVnf = additionalParamsForVnf;
    return this;
  }

  public InstantiateNsRequest addAdditionalParamsForVnfItem(InstantiateNsRequestAdditionalParamsForVnf additionalParamsForVnfItem) {
    if (this.additionalParamsForVnf == null) {
      this.additionalParamsForVnf = new ArrayList<InstantiateNsRequestAdditionalParamsForVnf>();
    }
    this.additionalParamsForVnf.add(additionalParamsForVnfItem);
    return this;
  }

   /**
   * Get additionalParamsForVnf
   * @return additionalParamsForVnf
  **/
  @Schema(description = "")
  public List<InstantiateNsRequestAdditionalParamsForVnf> getAdditionalParamsForVnf() {
    return additionalParamsForVnf;
  }

  public void setAdditionalParamsForVnf(List<InstantiateNsRequestAdditionalParamsForVnf> additionalParamsForVnf) {
    this.additionalParamsForVnf = additionalParamsForVnf;
  }

  public InstantiateNsRequest sshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public InstantiateNsRequest addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<String>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * Get sshKeys
   * @return sshKeys
  **/
  @Schema(description = "")
  public List<String> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }

  public InstantiateNsRequest nsrId(UUID nsrId) {
    this.nsrId = nsrId;
    return this;
  }

   /**
   * Get nsrId
   * @return nsrId
  **/
  @Schema(description = "")
  public UUID getNsrId() {
    return nsrId;
  }

  public void setNsrId(UUID nsrId) {
    this.nsrId = nsrId;
  }

  public InstantiateNsRequest vduImage(String vduImage) {
    this.vduImage = vduImage;
    return this;
  }

   /**
   * Get vduImage
   * @return vduImage
  **/
  @Schema(description = "")
  public String getVduImage() {
    return vduImage;
  }

  public void setVduImage(String vduImage) {
    this.vduImage = vduImage;
  }

  public InstantiateNsRequest placementEngine(String placementEngine) {
    this.placementEngine = placementEngine;
    return this;
  }

   /**
   * To compute automatically the target VIM for each VNF based on  constrains, e.g. latency. Currently only &#x27;PLA&#x27; is supported 
   * @return placementEngine
  **/
  @Schema(description = "To compute automatically the target VIM for each VNF based on  constrains, e.g. latency. Currently only 'PLA' is supported ")
  public String getPlacementEngine() {
    return placementEngine;
  }

  public void setPlacementEngine(String placementEngine) {
    this.placementEngine = placementEngine;
  }

  public InstantiateNsRequest placementConstraints(Map<String, Object> placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  public InstantiateNsRequest putPlacementConstraintsItem(String key, Object placementConstraintsItem) {
    if (this.placementConstraints == null) {
      this.placementConstraints = new HashMap<String, Object>();
    }
    this.placementConstraints.put(key, placementConstraintsItem);
    return this;
  }

   /**
   * Get placementConstraints
   * @return placementConstraints
  **/
  @Schema(description = "")
  public Map<String, Object> getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(Map<String, Object> placementConstraints) {
    this.placementConstraints = placementConstraints;
  }

  public InstantiateNsRequest k8sNamespace(String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
    return this;
  }

   /**
   * Get k8sNamespace
   * @return k8sNamespace
  **/
  @Schema(description = "")
  public String getK8sNamespace() {
    return k8sNamespace;
  }

  public void setK8sNamespace(String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
  }

  public InstantiateNsRequest timeoutNsDeploy(Integer timeoutNsDeploy) {
    this.timeoutNsDeploy = timeoutNsDeploy;
    return this;
  }

   /**
   * Get timeoutNsDeploy
   * @return timeoutNsDeploy
  **/
  @Schema(description = "")
  public Integer getTimeoutNsDeploy() {
    return timeoutNsDeploy;
  }

  public void setTimeoutNsDeploy(Integer timeoutNsDeploy) {
    this.timeoutNsDeploy = timeoutNsDeploy;
  }

  public InstantiateNsRequest vnf(List<InstantiateNsRequestVnf> vnf) {
    this.vnf = vnf;
    return this;
  }

  public InstantiateNsRequest addVnfItem(InstantiateNsRequestVnf vnfItem) {
    if (this.vnf == null) {
      this.vnf = new ArrayList<InstantiateNsRequestVnf>();
    }
    this.vnf.add(vnfItem);
    return this;
  }

   /**
   * Get vnf
   * @return vnf
  **/
  @Schema(description = "")
  public List<InstantiateNsRequestVnf> getVnf() {
    return vnf;
  }

  public void setVnf(List<InstantiateNsRequestVnf> vnf) {
    this.vnf = vnf;
  }

  public InstantiateNsRequest vld(List<InstantiateNsRequestVld> vld) {
    this.vld = vld;
    return this;
  }

  public InstantiateNsRequest addVldItem(InstantiateNsRequestVld vldItem) {
    if (this.vld == null) {
      this.vld = new ArrayList<InstantiateNsRequestVld>();
    }
    this.vld.add(vldItem);
    return this;
  }

   /**
   * Get vld
   * @return vld
  **/
  @Schema(description = "")
  public List<InstantiateNsRequestVld> getVld() {
    return vld;
  }

  public void setVld(List<InstantiateNsRequestVld> vld) {
    this.vld = vld;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantiateNsRequest instantiateNsRequest = (InstantiateNsRequest) o;
    return Objects.equals(this.nsName, instantiateNsRequest.nsName) &&
        Objects.equals(this.nsdId, instantiateNsRequest.nsdId) &&
        Objects.equals(this.vimAccountId, instantiateNsRequest.vimAccountId) &&
        Objects.equals(this.lcmOperationType, instantiateNsRequest.lcmOperationType) &&
        Objects.equals(this.nsInstanceId, instantiateNsRequest.nsInstanceId) &&
        Objects.equals(this.netsliceInstanceId, instantiateNsRequest.netsliceInstanceId) &&
        Objects.equals(this.nsDescription, instantiateNsRequest.nsDescription) &&
        Objects.equals(this.wimAccountId, instantiateNsRequest.wimAccountId) &&
        Objects.equals(this.additionalParamsForNs, instantiateNsRequest.additionalParamsForNs) &&
        Objects.equals(this.additionalParamsForVnf, instantiateNsRequest.additionalParamsForVnf) &&
        Objects.equals(this.sshKeys, instantiateNsRequest.sshKeys) &&
        Objects.equals(this.nsrId, instantiateNsRequest.nsrId) &&
        Objects.equals(this.vduImage, instantiateNsRequest.vduImage) &&
        Objects.equals(this.placementEngine, instantiateNsRequest.placementEngine) &&
        Objects.equals(this.placementConstraints, instantiateNsRequest.placementConstraints) &&
        Objects.equals(this.k8sNamespace, instantiateNsRequest.k8sNamespace) &&
        Objects.equals(this.timeoutNsDeploy, instantiateNsRequest.timeoutNsDeploy) &&
        Objects.equals(this.vnf, instantiateNsRequest.vnf) &&
        Objects.equals(this.vld, instantiateNsRequest.vld);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nsName, nsdId, vimAccountId, lcmOperationType, nsInstanceId, netsliceInstanceId, nsDescription, wimAccountId, additionalParamsForNs, additionalParamsForVnf, sshKeys, nsrId, vduImage, placementEngine, placementConstraints, k8sNamespace, timeoutNsDeploy, vnf, vld);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantiateNsRequest {\n");
    
    sb.append("    nsName: ").append(toIndentedString(nsName)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nsdId)).append("\n");
    sb.append("    vimAccountId: ").append(toIndentedString(vimAccountId)).append("\n");
    sb.append("    lcmOperationType: ").append(toIndentedString(lcmOperationType)).append("\n");
    sb.append("    nsInstanceId: ").append(toIndentedString(nsInstanceId)).append("\n");
    sb.append("    netsliceInstanceId: ").append(toIndentedString(netsliceInstanceId)).append("\n");
    sb.append("    nsDescription: ").append(toIndentedString(nsDescription)).append("\n");
    sb.append("    wimAccountId: ").append(toIndentedString(wimAccountId)).append("\n");
    sb.append("    additionalParamsForNs: ").append(toIndentedString(additionalParamsForNs)).append("\n");
    sb.append("    additionalParamsForVnf: ").append(toIndentedString(additionalParamsForVnf)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    nsrId: ").append(toIndentedString(nsrId)).append("\n");
    sb.append("    vduImage: ").append(toIndentedString(vduImage)).append("\n");
    sb.append("    placementEngine: ").append(toIndentedString(placementEngine)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    k8sNamespace: ").append(toIndentedString(k8sNamespace)).append("\n");
    sb.append("    timeoutNsDeploy: ").append(toIndentedString(timeoutNsDeploy)).append("\n");
    sb.append("    vnf: ").append(toIndentedString(vnf)).append("\n");
    sb.append("    vld: ").append(toIndentedString(vld)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
