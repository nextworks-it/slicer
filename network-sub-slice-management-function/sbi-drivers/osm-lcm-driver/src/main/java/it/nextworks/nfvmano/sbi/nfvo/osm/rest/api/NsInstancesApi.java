/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.api;


import com.google.gson.reflect.TypeToken;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.client.*;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NsInstancesApi {
    private ApiClient apiClient;

    public NsInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NsInstancesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for actionOnNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call actionOnNSinstanceCall(String nsInstanceId, NSinstanceActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}/action"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call actionOnNSinstanceValidateBeforeCall(String nsInstanceId, NSinstanceActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling actionOnNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = actionOnNSinstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute an action on a NS instance
     * Execute an action on a NS instance. The NS instance must have been created and must be in INSTANTIATED state. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId actionOnNSinstance(String nsInstanceId, NSinstanceActionRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = actionOnNSinstanceWithHttpInfo(nsInstanceId, body);
        return resp.getData();
    }

    /**
     * Execute an action on a NS instance
     * Execute an action on a NS instance. The NS instance must have been created and must be in INSTANTIATED state. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> actionOnNSinstanceWithHttpInfo(String nsInstanceId, NSinstanceActionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = actionOnNSinstanceValidateBeforeCall(nsInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute an action on a NS instance (asynchronously)
     * Execute an action on a NS instance. The NS instance must have been created and must be in INSTANTIATED state. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call actionOnNSinstanceAsync(String nsInstanceId, NSinstanceActionRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = actionOnNSinstanceValidateBeforeCall(nsInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNSinstance
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNSinstanceCall(InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNSinstanceValidateBeforeCall(InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = addNSinstanceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NS instance resource
     * Create a new NS instance resource
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId addNSinstance(InstantiateNsRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = addNSinstanceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NS instance resource
     * Create a new NS instance resource
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> addNSinstanceWithHttpInfo(InstantiateNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addNSinstanceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NS instance resource (asynchronously)
     * Create a new NS instance resource
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNSinstanceAsync(InstantiateNsRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNSinstanceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNsSubcriptions
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNsSubcriptionsCall(NslcmSubscriptionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNsSubcriptionsValidateBeforeCall(NslcmSubscriptionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = addNsSubcriptionsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new subscription for the Network service
     * Create a new subscription for the Network service
     * @param body  (optional)
     * @return NslcmSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NslcmSubscriptionResponse addNsSubcriptions(NslcmSubscriptionRequest body) throws ApiException {
        ApiResponse<NslcmSubscriptionResponse> resp = addNsSubcriptionsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new subscription for the Network service
     * Create a new subscription for the Network service
     * @param body  (optional)
     * @return ApiResponse&lt;NslcmSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NslcmSubscriptionResponse> addNsSubcriptionsWithHttpInfo(NslcmSubscriptionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addNsSubcriptionsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NslcmSubscriptionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new subscription for the Network service (asynchronously)
     * Create a new subscription for the Network service
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNsSubcriptionsAsync(NslcmSubscriptionRequest body, final ApiCallback<NslcmSubscriptionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNsSubcriptionsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NslcmSubscriptionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNSinstanceContent
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNSinstanceContentCall(InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNSinstanceContentValidateBeforeCall(InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createNSinstanceContentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NS instance
     * Create a new NS instance
     * @param body  (optional)
     * @return CreateNSinstanceContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNSinstanceContentResponse createNSinstanceContent(InstantiateNsRequest body) throws ApiException {
        ApiResponse<CreateNSinstanceContentResponse> resp = createNSinstanceContentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NS instance
     * Create a new NS instance
     * @param body  (optional)
     * @return ApiResponse&lt;CreateNSinstanceContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNSinstanceContentResponse> createNSinstanceContentWithHttpInfo(InstantiateNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createNSinstanceContentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateNSinstanceContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NS instance (asynchronously)
     * Create a new NS instance
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNSinstanceContentAsync(InstantiateNsRequest body, final ApiCallback<CreateNSinstanceContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNSinstanceContentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNSinstanceContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNSinstanceCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vcaStatusRefresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vcaStatusRefresh", vcaStatusRefresh));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNSinstanceValidateBeforeCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling deleteNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNSinstanceCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNSinstance(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        deleteNSinstanceWithHttpInfo(nsInstanceId, vcaStatusRefresh);
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNSinstanceWithHttpInfo(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        com.squareup.okhttp.Call call = deleteNSinstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an individual NS instance resource (asynchronously)
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNSinstanceAsync(String nsInstanceId, Boolean vcaStatusRefresh, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNSinstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNSinstanceContent
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNSinstanceContentCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances_content/{nsInstanceContentId}"
            .replaceAll("\\{" + "nsInstanceContentId" + "\\}", apiClient.escapeString(nsInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNSinstanceContentValidateBeforeCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceContentId' is set
        if (nsInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceContentId' when calling deleteNSinstanceContent(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNSinstanceContentCall(nsInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId deleteNSinstanceContent(String nsInstanceContentId) throws ApiException {
        ApiResponse<ObjectId> resp = deleteNSinstanceContentWithHttpInfo(nsInstanceContentId);
        return resp.getData();
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> deleteNSinstanceContentWithHttpInfo(String nsInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNSinstanceContentValidateBeforeCall(nsInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an individual NS instance resource (asynchronously)
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNSinstanceContentAsync(String nsInstanceContentId, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNSinstanceContentValidateBeforeCall(nsInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNsSubcriptionId
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNsSubcriptionIdCall(String nsSubscriptionsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/subscriptions/{nsSubscriptionsId}"
            .replaceAll("\\{" + "nsSubscriptionsId" + "\\}", apiClient.escapeString(nsSubscriptionsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNsSubcriptionIdValidateBeforeCall(String nsSubscriptionsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsSubscriptionsId' is set
        if (nsSubscriptionsId == null) {
            throw new ApiException("Missing the required parameter 'nsSubscriptionsId' when calling deleteNsSubcriptionId(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNsSubcriptionIdCall(nsSubscriptionsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual Network Service Subscription
     * Delete an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNsSubcriptionId(String nsSubscriptionsId) throws ApiException {
        deleteNsSubcriptionIdWithHttpInfo(nsSubscriptionsId);
    }

    /**
     * Delete an individual Network Service Subscription
     * Delete an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNsSubcriptionIdWithHttpInfo(String nsSubscriptionsId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNsSubcriptionIdValidateBeforeCall(nsSubscriptionsId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an individual Network Service Subscription (asynchronously)
     * Delete an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNsSubcriptionIdAsync(String nsSubscriptionsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNsSubcriptionIdValidateBeforeCall(nsSubscriptionsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getNSLCMOpOcc
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccCall(String nsLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSLCMOpOccValidateBeforeCall(String nsLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling getNSLCMOpOcc(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSLCMOpOccCall(nsLcmOpOccId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @return NsLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsLcmOpOcc getNSLCMOpOcc(String nsLcmOpOccId) throws ApiException {
        ApiResponse<NsLcmOpOcc> resp = getNSLCMOpOccWithHttpInfo(nsLcmOpOccId);
        return resp.getData();
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @return ApiResponse&lt;NsLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsLcmOpOcc> getNSLCMOpOccWithHttpInfo(String nsLcmOpOccId) throws ApiException {
        com.squareup.okhttp.Call call = getNSLCMOpOccValidateBeforeCall(nsLcmOpOccId, null, null);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence (asynchronously)
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccAsync(String nsLcmOpOccId, final ApiCallback<NsLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSLCMOpOccValidateBeforeCall(nsLcmOpOccId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSLCMOpOccs
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_lcm_op_occs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSLCMOpOccsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSLCMOpOccsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences
     * Query information about multiple NS LCM Operation Occurrences
     * @return ArrayOfNsLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsLcmOpOcc getNSLCMOpOccs() throws ApiException {
        ApiResponse<ArrayOfNsLcmOpOcc> resp = getNSLCMOpOccsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences
     * Query information about multiple NS LCM Operation Occurrences
     * @return ApiResponse&lt;ArrayOfNsLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsLcmOpOcc> getNSLCMOpOccsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSLCMOpOccsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences (asynchronously)
     * Query information about multiple NS LCM Operation Occurrences
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccsAsync(final ApiCallback<ArrayOfNsLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSLCMOpOccsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSinstanceCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vcaStatusRefresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vcaStatusRefresh", vcaStatusRefresh));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSinstanceValidateBeforeCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling getNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSinstanceCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance getNSinstance(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        ApiResponse<NsInstance> resp = getNSinstanceWithHttpInfo(nsInstanceId, vcaStatusRefresh);
        return resp.getData();
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> getNSinstanceWithHttpInfo(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        com.squareup.okhttp.Call call = getNSinstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS instance resource (asynchronously)
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSinstanceAsync(String nsInstanceId, Boolean vcaStatusRefresh, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSinstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSinstanceContent
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSinstanceContentCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances_content/{nsInstanceContentId}"
            .replaceAll("\\{" + "nsInstanceContentId" + "\\}", apiClient.escapeString(nsInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSinstanceContentValidateBeforeCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceContentId' is set
        if (nsInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceContentId' when calling getNSinstanceContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSinstanceContentCall(nsInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance getNSinstanceContent(String nsInstanceContentId) throws ApiException {
        ApiResponse<NsInstance> resp = getNSinstanceContentWithHttpInfo(nsInstanceContentId);
        return resp.getData();
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> getNSinstanceContentWithHttpInfo(String nsInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = getNSinstanceContentValidateBeforeCall(nsInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS instance resource (asynchronously)
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSinstanceContentAsync(String nsInstanceContentId, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSinstanceContentValidateBeforeCall(nsInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSinstances
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSinstancesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSinstancesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSinstancesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ArrayOfNsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsInstance getNSinstances() throws ApiException {
        ApiResponse<ArrayOfNsInstance> resp = getNSinstancesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ApiResponse&lt;ArrayOfNsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsInstance> getNSinstancesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSinstancesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS instances (asynchronously)
     * Query information about multiple NS isntances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSinstancesAsync(final ApiCallback<ArrayOfNsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSinstancesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSinstancesContent
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSinstancesContentCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSinstancesContentValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSinstancesContentCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ArrayOfNsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsInstance getNSinstancesContent() throws ApiException {
        ApiResponse<ArrayOfNsInstance> resp = getNSinstancesContentWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ApiResponse&lt;ArrayOfNsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsInstance> getNSinstancesContentWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSinstancesContentValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS instances (asynchronously)
     * Query information about multiple NS isntances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSinstancesContentAsync(final ApiCallback<ArrayOfNsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSinstancesContentValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNsSubcriptionId
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNsSubcriptionIdCall(String nsSubscriptionsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/subscriptions/{nsSubscriptionsId}"
            .replaceAll("\\{" + "nsSubscriptionsId" + "\\}", apiClient.escapeString(nsSubscriptionsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNsSubcriptionIdValidateBeforeCall(String nsSubscriptionsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsSubscriptionsId' is set
        if (nsSubscriptionsId == null) {
            throw new ApiException("Missing the required parameter 'nsSubscriptionsId' when calling getNsSubcriptionId(Async)");
        }
        
        com.squareup.okhttp.Call call = getNsSubcriptionIdCall(nsSubscriptionsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read information about an individual Network Service Subscription
     * Read information about an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @return NslcmSubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NslcmSubscriptionInfo getNsSubcriptionId(String nsSubscriptionsId) throws ApiException {
        ApiResponse<NslcmSubscriptionInfo> resp = getNsSubcriptionIdWithHttpInfo(nsSubscriptionsId);
        return resp.getData();
    }

    /**
     * Read information about an individual Network Service Subscription
     * Read information about an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @return ApiResponse&lt;NslcmSubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NslcmSubscriptionInfo> getNsSubcriptionIdWithHttpInfo(String nsSubscriptionsId) throws ApiException {
        com.squareup.okhttp.Call call = getNsSubcriptionIdValidateBeforeCall(nsSubscriptionsId, null, null);
        Type localVarReturnType = new TypeToken<NslcmSubscriptionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read information about an individual Network Service Subscription (asynchronously)
     * Read information about an individual Network Service Subscription
     * @param nsSubscriptionsId Network Service Subscription ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNsSubcriptionIdAsync(String nsSubscriptionsId, final ApiCallback<NslcmSubscriptionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNsSubcriptionIdValidateBeforeCall(nsSubscriptionsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NslcmSubscriptionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNsSubcriptions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNsSubcriptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNsSubcriptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNsSubcriptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS instance subscription
     * Query information about multiple NS instance subscription
     * @return ArrayOfNslcmSubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNslcmSubscriptionInfo getNsSubcriptions() throws ApiException {
        ApiResponse<ArrayOfNslcmSubscriptionInfo> resp = getNsSubcriptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS instance subscription
     * Query information about multiple NS instance subscription
     * @return ApiResponse&lt;ArrayOfNslcmSubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNslcmSubscriptionInfo> getNsSubcriptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNsSubcriptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNslcmSubscriptionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS instance subscription (asynchronously)
     * Query information about multiple NS instance subscription
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNsSubcriptionsAsync(final ApiCallback<ArrayOfNslcmSubscriptionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNsSubcriptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNslcmSubscriptionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVnfInstance
     * @param vnfInstanceId VNF Instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVnfInstanceCall(String vnfInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/vnf_instances/{vnfInstanceId}"
            .replaceAll("\\{" + "vnfInstanceId" + "\\}", apiClient.escapeString(vnfInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVnfInstanceValidateBeforeCall(String vnfInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vnfInstanceId' is set
        if (vnfInstanceId == null) {
            throw new ApiException("Missing the required parameter 'vnfInstanceId' when calling getVnfInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = getVnfInstanceCall(vnfInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about an individual VNF Instance
     * Query information about an individual VNF Instance
     * @param vnfInstanceId VNF Instance ID (required)
     * @return VnfInstanceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VnfInstanceInfo getVnfInstance(String vnfInstanceId) throws ApiException {
        ApiResponse<VnfInstanceInfo> resp = getVnfInstanceWithHttpInfo(vnfInstanceId);
        return resp.getData();
    }

    /**
     * Query information about an individual VNF Instance
     * Query information about an individual VNF Instance
     * @param vnfInstanceId VNF Instance ID (required)
     * @return ApiResponse&lt;VnfInstanceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VnfInstanceInfo> getVnfInstanceWithHttpInfo(String vnfInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getVnfInstanceValidateBeforeCall(vnfInstanceId, null, null);
        Type localVarReturnType = new TypeToken<VnfInstanceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about an individual VNF Instance (asynchronously)
     * Query information about an individual VNF Instance
     * @param vnfInstanceId VNF Instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVnfInstanceAsync(String vnfInstanceId, final ApiCallback<VnfInstanceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVnfInstanceValidateBeforeCall(vnfInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VnfInstanceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVnfInstances
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVnfInstancesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/vnf_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVnfInstancesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getVnfInstancesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple VNF Instances
     * Query information about multiple VNF Instances
     * @return ArrayOfVnfInstanceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfVnfInstanceInfo getVnfInstances() throws ApiException {
        ApiResponse<ArrayOfVnfInstanceInfo> resp = getVnfInstancesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple VNF Instances
     * Query information about multiple VNF Instances
     * @return ApiResponse&lt;ArrayOfVnfInstanceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfVnfInstanceInfo> getVnfInstancesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVnfInstancesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfVnfInstanceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple VNF Instances (asynchronously)
     * Query information about multiple VNF Instances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVnfInstancesAsync(final ApiCallback<ArrayOfVnfInstanceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVnfInstancesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfVnfInstanceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instantiateNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instantiateNSinstanceCall(String nsInstanceId, InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}/instantiate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instantiateNSinstanceValidateBeforeCall(String nsInstanceId, InstantiateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling instantiateNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = instantiateNSinstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Instantiate a NS
     * Instantiate a NS. The precondition is that the NS instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId instantiateNSinstance(String nsInstanceId, InstantiateNsRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = instantiateNSinstanceWithHttpInfo(nsInstanceId, body);
        return resp.getData();
    }

    /**
     * Instantiate a NS
     * Instantiate a NS. The precondition is that the NS instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> instantiateNSinstanceWithHttpInfo(String nsInstanceId, InstantiateNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = instantiateNSinstanceValidateBeforeCall(nsInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantiate a NS (asynchronously)
     * Instantiate a NS. The precondition is that the NS instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instantiateNSinstanceAsync(String nsInstanceId, InstantiateNsRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instantiateNSinstanceValidateBeforeCall(nsInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scaleNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scaleNSinstanceCall(String nsInstanceId, ScaleNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}/scale"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scaleNSinstanceValidateBeforeCall(String nsInstanceId, ScaleNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling scaleNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = scaleNSinstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Scale a NS instance
     * Scale a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state remains INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void scaleNSinstance(String nsInstanceId, ScaleNsRequest body) throws ApiException {
        scaleNSinstanceWithHttpInfo(nsInstanceId, body);
    }

    /**
     * Scale a NS instance
     * Scale a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state remains INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> scaleNSinstanceWithHttpInfo(String nsInstanceId, ScaleNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = scaleNSinstanceValidateBeforeCall(nsInstanceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Scale a NS instance (asynchronously)
     * Scale a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state remains INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scaleNSinstanceAsync(String nsInstanceId, ScaleNsRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scaleNSinstanceValidateBeforeCall(nsInstanceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for terminateNSinstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateNSinstanceCall(String nsInstanceId, TerminateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_instances/{nsInstanceId}/terminate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateNSinstanceValidateBeforeCall(String nsInstanceId, TerminateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling terminateNSinstance(Async)");
        }
        
        com.squareup.okhttp.Call call = terminateNSinstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Terminate a NS instance
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId terminateNSinstance(String nsInstanceId, TerminateNsRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = terminateNSinstanceWithHttpInfo(nsInstanceId, body);
        return resp.getData();
    }

    /**
     * Terminate a NS instance
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> terminateNSinstanceWithHttpInfo(String nsInstanceId, TerminateNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = terminateNSinstanceValidateBeforeCall(nsInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Terminate a NS instance (asynchronously)
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateNSinstanceAsync(String nsInstanceId, TerminateNsRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateNSinstanceValidateBeforeCall(nsInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
