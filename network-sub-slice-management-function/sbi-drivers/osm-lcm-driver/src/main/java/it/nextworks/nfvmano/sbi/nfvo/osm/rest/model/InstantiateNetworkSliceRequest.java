/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * InstantiateNsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-04T13:48:18.253Z[GMT]")
public class InstantiateNetworkSliceRequest {
  @SerializedName("nsiName")
  private String nsiName = null;

  @SerializedName("nstId")
  private UUID nstId = null;

  @SerializedName("vimAccountId")
  private UUID vimAccountId = null;

  @SerializedName("lcmOperationType")
  private String lcmOperationType = null;

  @SerializedName("nsInstanceId")
  private UUID nsInstanceId = null;

  @SerializedName("netsliceInstanceId")
  private UUID netsliceInstanceId = null;

  @SerializedName("nsiDescription")
  private String nsiDescription = null;

  @SerializedName("wimAccountId")
  private OneOfInstantiateNsRequestWimAccountId wimAccountId = null;
  @SerializedName("netslice-subnet")
  private List<NetSliceSubnet> netSliceSubnets = null;

  public List<NetSliceSubnet> getNetSliceSubnets() {
    return netSliceSubnets;
  }

  public void setNetSliceSubnets(List<NetSliceSubnet> netSliceSubnets) {
    this.netSliceSubnets = netSliceSubnets;
  }
//@SerializedName("additionalParamsForNs")
  //private Map<String, String> additionalParamsForNs = null;

  @SerializedName("ssh_keys")
  private List<String> sshKeys = null;

  public InstantiateNetworkSliceRequest nsName(String nsName) {
    this.nsiName = nsName;
    return this;
  }

   /**
   * Human-readable name of the NS instance to be created. 
   * @return nsName
  **/
  @Schema(required = true, description = "Human-readable name of the NS instance to be created. ")
  public String getNsiName() {
    return nsiName;
  }

  public void setNsiName(String nsiName) {
    this.nsiName = nsiName;
  }

  public InstantiateNetworkSliceRequest nsdId(UUID nsdId) {
    this.nstId = nsdId;
    return this;
  }

   /**
   * Identifier of the NSD that defines the NS instance to be created. 
   * @return nsdId
  **/
  @Schema(required = true, description = "Identifier of the NSD that defines the NS instance to be created. ")
  public UUID getNstId() {
    return nstId;
  }

  public void setNstId(UUID nstId) {
    this.nstId = nstId;
  }

  public InstantiateNetworkSliceRequest vimAccountId(UUID vimAccountId) {
    this.vimAccountId = vimAccountId;
    return this;
  }

   /**
   * Identifier of the VIM Account where the NS instance shall be created. 
   * @return vimAccountId
  **/
  @Schema(required = true, description = "Identifier of the VIM Account where the NS instance shall be created. ")
  public UUID getVimAccountId() {
    return vimAccountId;
  }

  public void setVimAccountId(UUID vimAccountId) {
    this.vimAccountId = vimAccountId;
  }

  public InstantiateNetworkSliceRequest lcmOperationType(String lcmOperationType) {
    this.lcmOperationType = lcmOperationType;
    return this;
  }

   /**
   * Get lcmOperationType
   * @return lcmOperationType
  **/
  @Schema(description = "")
  public String getLcmOperationType() {
    return lcmOperationType;
  }

  public void setLcmOperationType(String lcmOperationType) {
    this.lcmOperationType = lcmOperationType;
  }

  public InstantiateNetworkSliceRequest nsInstanceId(UUID nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
    return this;
  }

   /**
   * Get nsInstanceId
   * @return nsInstanceId
  **/
  @Schema(description = "")
  public UUID getNsInstanceId() {
    return nsInstanceId;
  }

  public void setNsInstanceId(UUID nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
  }

  public InstantiateNetworkSliceRequest netsliceInstanceId(UUID netsliceInstanceId) {
    this.netsliceInstanceId = netsliceInstanceId;
    return this;
  }

   /**
   * Get netsliceInstanceId
   * @return netsliceInstanceId
  **/
  @Schema(description = "")
  public UUID getNetsliceInstanceId() {
    return netsliceInstanceId;
  }

  public void setNetsliceInstanceId(UUID netsliceInstanceId) {
    this.netsliceInstanceId = netsliceInstanceId;
  }

  public InstantiateNetworkSliceRequest nsDescription(String nsDescription) {
    this.nsiDescription = nsDescription;
    return this;
  }

   /**
   * Get nsDescription
   * @return nsDescription
  **/
  @Schema(description = "")
  public String getNsiDescription() {
    return nsiDescription;
  }

  public void setNsiDescription(String nsiDescription) {
    this.nsiDescription = nsiDescription;
  }

  public InstantiateNetworkSliceRequest wimAccountId(OneOfInstantiateNsRequestWimAccountId wimAccountId) {
    this.wimAccountId = wimAccountId;
    return this;
  }

   /**
   * Get wimAccountId
   * @return wimAccountId
  **/
  @Schema(description = "")
  public OneOfInstantiateNsRequestWimAccountId getWimAccountId() {
    return wimAccountId;
  }

  public void setWimAccountId(OneOfInstantiateNsRequestWimAccountId wimAccountId) {
    this.wimAccountId = wimAccountId;
  }

  /*
  public InstantiateNetworkSliceRequest additionalParamsForNs(Map<String, String> additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
    return this;
  }

  public InstantiateNetworkSliceRequest putAdditionalParamsForNsItem(String key, String additionalParamsForNsItem) {
    if (this.additionalParamsForNs == null) {
      this.additionalParamsForNs = new HashMap<String, String>();
    }
    this.additionalParamsForNs.put(key, additionalParamsForNsItem);
    return this;
  }

*/

   /**
   * Get additionalParamsForNs
   * @return additionalParamsForNs
  **/
  /*
   @Schema(description = "")
  public Map<String, String> getAdditionalParamsForNs() {
    return additionalParamsForNs;
  }


  public void setAdditionalParamsForNs(Map<String, String> additionalParamsForNs) {
    this.additionalParamsForNs = additionalParamsForNs;
  }

  */



  public InstantiateNetworkSliceRequest sshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public InstantiateNetworkSliceRequest addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<String>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * Get sshKeys
   * @return sshKeys
  **/
  @Schema(description = "")
  public List<String> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantiateNetworkSliceRequest instantiateNsRequest = (InstantiateNetworkSliceRequest) o;
    return Objects.equals(this.nsiName, instantiateNsRequest.nsiName) &&
            Objects.equals(this.nstId, instantiateNsRequest.nstId) &&
            Objects.equals(this.vimAccountId, instantiateNsRequest.vimAccountId) &&
            Objects.equals(this.lcmOperationType, instantiateNsRequest.lcmOperationType) &&
            Objects.equals(this.nsInstanceId, instantiateNsRequest.nsInstanceId) &&
            Objects.equals(this.netsliceInstanceId, instantiateNsRequest.netsliceInstanceId) &&
            Objects.equals(this.nsiDescription, instantiateNsRequest.nsiDescription) &&
            Objects.equals(this.wimAccountId, instantiateNsRequest.wimAccountId) &&
           // Objects.equals(this.additionalParamsForNs, instantiateNsRequest.additionalParamsForNs) &&

            Objects.equals(this.sshKeys, instantiateNsRequest.sshKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nsiName, nstId, vimAccountId, lcmOperationType, nsInstanceId, netsliceInstanceId, nsiDescription, wimAccountId,
            //additionalParamsForNs,
            sshKeys);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantiateNsRequest {\n");
    
    sb.append("    nsName: ").append(toIndentedString(nsiName)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nstId)).append("\n");
    sb.append("    vimAccountId: ").append(toIndentedString(vimAccountId)).append("\n");
    sb.append("    lcmOperationType: ").append(toIndentedString(lcmOperationType)).append("\n");
    sb.append("    nsInstanceId: ").append(toIndentedString(nsInstanceId)).append("\n");
    sb.append("    netsliceInstanceId: ").append(toIndentedString(netsliceInstanceId)).append("\n");
    sb.append("    nsDescription: ").append(toIndentedString(nsiDescription)).append("\n");
    sb.append("    wimAccountId: ").append(toIndentedString(wimAccountId)).append("\n");
    //sb.append("    additionalParamsForNs: ").append(toIndentedString(additionalParamsForNs)).append("\n");

    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");

    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
