/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.api;


import com.google.gson.reflect.TypeToken;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.client.*;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.model.ArrayOfNsdInfo;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.model.Nsd;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.model.NsdInfo;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NsPackagesApi {
    private ApiClient apiClient;

    public NsPackagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NsPackagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNSD
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNSDCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsd/v1/ns_descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNSDValidateBeforeCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = addNSDCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }





    public com.squareup.okhttp.Call getNSDCall(String nsdInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsd/v1/ns_descriptors/{nsdInfoId}"
            .replaceAll("\\{" + "nsdInfoId" + "\\}", apiClient.escapeString(nsdInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSDValidateBeforeCall(String nsdInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsdInfoId' is set
        if (nsdInfoId == null) {
            throw new ApiException("Missing the required parameter 'nsdInfoId' when calling getNSD(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSDCall(nsdInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read information about an individual NS descriptor resource
     * Read information about an individual NS descriptor resource
     * @param nsdInfoId NSD Info ID (required)
     * @return NsdInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsdInfo getNSD(String nsdInfoId) throws ApiException {
        ApiResponse<NsdInfo> resp = getNSDWithHttpInfo(nsdInfoId);
        return resp.getData();
    }

    /**
     * Read information about an individual NS descriptor resource
     * Read information about an individual NS descriptor resource
     * @param nsdInfoId NSD Info ID (required)
     * @return NsdInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Nsd getNSDescriptor(String nsdInfoId) throws ApiException {
        ApiResponse<Nsd> resp = getNSDescriptorWithHttpInfo(nsdInfoId);
        return resp.getData();
    }

    /**
     * Read information about an individual NS descriptor resource
     * Read information about an individual NS descriptor resource
     * @param nsdInfoId NSD Info ID (required)
     * @return ApiResponse&lt;NsdInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsdInfo> getNSDWithHttpInfo(String nsdInfoId) throws ApiException {
        com.squareup.okhttp.Call call = getNSDValidateBeforeCall(nsdInfoId, null, null);
        Type localVarReturnType = new TypeToken<NsdInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }


    /**
     * Read information about an individual NS descriptor resource
     * Read information about an individual NS descriptor resource
     * @param nsdInfoId NSD Info ID (required)
     * @return ApiResponse&lt;NsdInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Nsd> getNSDescriptorWithHttpInfo(String nsdInfoId) throws ApiException {
        com.squareup.okhttp.Call call = getNSDValidateBeforeCall(nsdInfoId, null, null);
        Type localVarReturnType = new TypeToken<Nsd>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read information about an individual NS descriptor resource (asynchronously)
     * Read information about an individual NS descriptor resource
     * @param nsdInfoId NSD Info ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSDAsync(String nsdInfoId, final ApiCallback<NsdInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSDValidateBeforeCall(nsdInfoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsdInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSDcontent
     * @param nsdInfoId NSD Info ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSDcontentCall(String nsdInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content"
            .replaceAll("\\{" + "nsdInfoId" + "\\}", apiClient.escapeString(nsdInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSDcontentValidateBeforeCall(String nsdInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsdInfoId' is set
        if (nsdInfoId == null) {
            throw new ApiException("Missing the required parameter 'nsdInfoId' when calling getNSDcontent(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSDcontentCall(nsdInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }




    public com.squareup.okhttp.Call getNSDsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsd/v1/ns_descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSDsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSDsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS descriptor resources
     * Query information about multiple NS descriptor resources
     * @return ArrayOfNsdInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsdInfo getNSDs() throws ApiException {
        ApiResponse<ArrayOfNsdInfo> resp = getNSDsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS descriptor resources
     * Query information about multiple NS descriptor resources
     * @return ApiResponse&lt;ArrayOfNsdInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsdInfo> getNSDsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSDsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsdInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS descriptor resources (asynchronously)
     * Query information about multiple NS descriptor resources
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSDsAsync(final ApiCallback<ArrayOfNsdInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSDsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsdInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }




    /**
     * Fetch the content of a NSD
     * Fetch the content of a NSD
     * @param nsdInfoId NSD Info ID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getNSDcontent(String nsdInfoId) throws ApiException {
        ApiResponse<File> resp = getNSDcontentWithHttpInfo(nsdInfoId);
        return resp.getData();
    }

    /**
     * Fetch the content of a NSD
     * Fetch the content of a NSD
     * @param nsdInfoId NSD Info ID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getNSDcontentWithHttpInfo(String nsdInfoId) throws ApiException {
        com.squareup.okhttp.Call call = getNSDcontentValidateBeforeCall(nsdInfoId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }


}
