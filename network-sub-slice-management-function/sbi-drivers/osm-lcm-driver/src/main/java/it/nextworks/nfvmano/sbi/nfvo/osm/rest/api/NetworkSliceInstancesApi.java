/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.nfvmano.sbi.nfvo.osm.rest.api;


import com.google.gson.reflect.TypeToken;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.client.*;
import it.nextworks.nfvmano.sbi.nfvo.osm.rest.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkSliceInstancesApi {
    private ApiClient apiClient;

    public NetworkSliceInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkSliceInstancesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }



    
    /**
     * Build call for addNetworkSliceInstance
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNetworkSliceInstanceCall(InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNetworkSliceInstanceValidateBeforeCall(InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = addNetworkSliceInstanceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NS instance resource
     * Create a new NS instance resource
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId addNetworkSliceInstance(InstantiateNetworkSliceRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = addNetworkSliceInstanceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NS instance resource
     * Create a new NS instance resource
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> addNetworkSliceInstanceWithHttpInfo(InstantiateNetworkSliceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addNetworkSliceInstanceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NS instance resource (asynchronously)
     * Create a new NS instance resource
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNetworkSliceInstanceAsync(InstantiateNetworkSliceRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNetworkSliceInstanceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }




    /**
     * Build call for createNetworkSliceInstanceContent
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNetworkSliceInstanceContentCall(InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNetworkSliceInstanceContentValidateBeforeCall(InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createNetworkSliceInstanceContentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NS instance
     * Create a new NS instance
     * @param body  (optional)
     * @return CreateNetworkSliceInstanceContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNetworkSliceInstanceContentResponse createNetworkSliceInstanceContent(InstantiateNetworkSliceRequest body) throws ApiException {
        ApiResponse<CreateNetworkSliceInstanceContentResponse> resp = createNetworkSliceInstanceContentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NS instance
     * Create a new NS instance
     * @param body  (optional)
     * @return ApiResponse&lt;CreateNetworkSliceInstanceContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNetworkSliceInstanceContentResponse> createNetworkSliceInstanceContentWithHttpInfo(InstantiateNetworkSliceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createNetworkSliceInstanceContentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateNetworkSliceInstanceContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NS instance (asynchronously)
     * Create a new NS instance
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNetworkSliceInstanceContentAsync(InstantiateNetworkSliceRequest body, final ApiCallback<CreateNetworkSliceInstanceContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNetworkSliceInstanceContentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNetworkSliceInstanceContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNetworkSliceInstance
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkSliceInstanceCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vcaStatusRefresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vcaStatusRefresh", vcaStatusRefresh));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNetworkSliceInstanceValidateBeforeCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling deleteNetworkSliceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNetworkSliceInstance(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        deleteNetworkSliceInstanceWithHttpInfo(nsInstanceId, vcaStatusRefresh);
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNetworkSliceInstanceWithHttpInfo(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an individual NS instance resource (asynchronously)
     * Delete an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkSliceInstanceAsync(String nsInstanceId, Boolean vcaStatusRefresh, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNetworkSliceInstanceContent
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkSliceInstanceContentCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content/{nsInstanceContentId}"
            .replaceAll("\\{" + "nsInstanceContentId" + "\\}", apiClient.escapeString(nsInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNetworkSliceInstanceContentValidateBeforeCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceContentId' is set
        if (nsInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceContentId' when calling deleteNetworkSliceInstanceContent(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceContentCall(nsInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId deleteNetworkSliceInstanceContent(String nsInstanceContentId) throws ApiException {
        ApiResponse<ObjectId> resp = deleteNetworkSliceInstanceContentWithHttpInfo(nsInstanceContentId);
        return resp.getData();
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> deleteNetworkSliceInstanceContentWithHttpInfo(String nsInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceContentValidateBeforeCall(nsInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an individual NS instance resource (asynchronously)
     * Delete an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkSliceInstanceContentAsync(String nsInstanceContentId, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNetworkSliceInstanceContentValidateBeforeCall(nsInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }


    /**
     * Build call for getNSLCMOpOcc
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceLCMOpOccCall(String nsLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/nsi_lcm_op_occs/{nsLcmOpOccId}"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSLCMOpOccValidateBeforeCall(String nsLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling getNSLCMOpOcc(Async)");
        }
        
        com.squareup.okhttp.Call call = getNetworkSliceLCMOpOccCall(nsLcmOpOccId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @return NetworkSliceOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkSliceLcmOpOcc getNetworkSliceLCMOpOcc(String nsLcmOpOccId) throws ApiException {
        ApiResponse<NetworkSliceLcmOpOcc> resp = getNSLCMOpOccWithHttpInfo(nsLcmOpOccId);
        return resp.getData();
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @return ApiResponse&lt;NetworkSliceOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkSliceLcmOpOcc> getNSLCMOpOccWithHttpInfo(String nsLcmOpOccId) throws ApiException {
        com.squareup.okhttp.Call call = getNSLCMOpOccValidateBeforeCall(nsLcmOpOccId, null, null);
        Type localVarReturnType = new TypeToken<NetworkSliceLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about an individual NS LCM Operation Occurrence (asynchronously)
     * Query information about an individual NS LCM Operation Occurrence
     * @param nsLcmOpOccId NS LCM Operation Occurrence ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceLCMOpOccAsync(String nsLcmOpOccId, final ApiCallback<NetworkSliceLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSLCMOpOccValidateBeforeCall(nsLcmOpOccId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkSliceLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSLCMOpOccs
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/nsi_lcm_op_occs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSLCMOpOccsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSLCMOpOccsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences
     * Query information about multiple NS LCM Operation Occurrences
     * @return ArrayOfNetworkSliceOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNetworkSliceLcmOpOcc getNSLCMOpOccs() throws ApiException {
        ApiResponse<ArrayOfNetworkSliceLcmOpOcc> resp = getNSLCMOpOccsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences
     * Query information about multiple NS LCM Operation Occurrences
     * @return ApiResponse&lt;ArrayOfNetworkSliceOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNetworkSliceLcmOpOcc> getNSLCMOpOccsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSLCMOpOccsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNetworkSliceLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS LCM Operation Occurrences (asynchronously)
     * Query information about multiple NS LCM Operation Occurrences
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSLCMOpOccsAsync(final ApiCallback<ArrayOfNetworkSliceLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSLCMOpOccsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNetworkSliceLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkSliceInstance
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstanceCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vcaStatusRefresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vcaStatusRefresh", vcaStatusRefresh));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkSliceInstanceValidateBeforeCall(String nsInstanceId, Boolean vcaStatusRefresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling getNetworkSliceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = getNetworkSliceInstanceCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance getNetworkSliceInstance(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        ApiResponse<NsInstance> resp = getNetworkSliceInstanceWithHttpInfo(nsInstanceId, vcaStatusRefresh);
        return resp.getData();
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> getNetworkSliceInstanceWithHttpInfo(String nsInstanceId, Boolean vcaStatusRefresh) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkSliceInstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS instance resource (asynchronously)
     * Read an individual NS instance resource
     * @param nsInstanceId NS Instance ID (required)
     * @param vcaStatusRefresh Set to true if vca status needs to be refreshed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstanceAsync(String nsInstanceId, Boolean vcaStatusRefresh, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkSliceInstanceValidateBeforeCall(nsInstanceId, vcaStatusRefresh, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkSliceInstanceContent
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstanceContentCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content/{nsInstanceContentId}"
            .replaceAll("\\{" + "nsInstanceContentId" + "\\}", apiClient.escapeString(nsInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkSliceInstanceContentValidateBeforeCall(String nsInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceContentId' is set
        if (nsInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceContentId' when calling getNetworkSliceInstanceContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getNetworkSliceInstanceContentCall(nsInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance getNetworkSliceInstanceContent(String nsInstanceContentId) throws ApiException {
        ApiResponse<NsInstance> resp = getNetworkSliceInstanceContentWithHttpInfo(nsInstanceContentId);
        return resp.getData();
    }

    /**
     * Read an individual NS instance resource
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> getNetworkSliceInstanceContentWithHttpInfo(String nsInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkSliceInstanceContentValidateBeforeCall(nsInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS instance resource (asynchronously)
     * Read an individual NS instance resource
     * @param nsInstanceContentId NS Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstanceContentAsync(String nsInstanceContentId, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkSliceInstanceContentValidateBeforeCall(nsInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkSliceInstances
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstancesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkSliceInstancesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNetworkSliceInstancesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ArrayOfNsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsInstance getNetworkSliceInstances() throws ApiException {
        ApiResponse<ArrayOfNsInstance> resp = getNetworkSliceInstancesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NS instances
     * Query information about multiple NS isntances
     * @return ApiResponse&lt;ArrayOfNsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsInstance> getNetworkSliceInstancesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkSliceInstancesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NS instances (asynchronously)
     * Query information about multiple NS isntances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstancesAsync(final ApiCallback<ArrayOfNsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkSliceInstancesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkSliceInstancesContent
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkSliceInstancesContentCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkSliceInstancesContentValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNetworkSliceInstancesContentCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

   

   
    /**
     * Build call for instantiateNetworkSliceInstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instantiateNetworkSliceInstanceCall(String nsInstanceId, InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{nsInstanceId}/instantiate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instantiateNetworkSliceInstanceValidateBeforeCall(String nsInstanceId, InstantiateNetworkSliceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling instantiateNetworkSliceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = instantiateNetworkSliceInstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Instantiate a NS
     * Instantiate a NS. The precondition is that the NS instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId instantiateNetworkSliceinstance(String nsInstanceId, InstantiateNetworkSliceRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = instantiateNetworkSliceInstanceWithHttpInfo(nsInstanceId, body);
        return resp.getData();
    }

    /**
     * Instantiate a NS
     * Instantiate a NS. The precondition is that the NS instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED.
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> instantiateNetworkSliceInstanceWithHttpInfo(String nsInstanceId, InstantiateNetworkSliceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = instantiateNetworkSliceInstanceValidateBeforeCall(nsInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }



    /**
     * Build call for terminateNetworkSliceInstance
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateNetworkSliceInstanceCall(String nsInstanceId, TerminateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{nsInstanceId}/terminate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateNetworkSliceInstanceValidateBeforeCall(String nsInstanceId, TerminateNsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling terminateNetworkSliceInstance(Async)");
        }
        
        com.squareup.okhttp.Call call = terminateNetworkSliceInstanceCall(nsInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Terminate a NS instance
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId terminateNetworkSliceInstance(String nsInstanceId, TerminateNsRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = terminateNetworkSliceInstanceWithHttpInfo(nsInstanceId, body);
        return resp.getData();
    }

    /**
     * Terminate a NS instance
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> terminateNetworkSliceInstanceWithHttpInfo(String nsInstanceId, TerminateNsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = terminateNetworkSliceInstanceValidateBeforeCall(nsInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Terminate a NS instance (asynchronously)
     * Terminate a NS instance. The precondition is that the NS instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NS Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes NOT_INSTANTIATED. 
     * @param nsInstanceId NS Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateNetworkSliceInstanceAsync(String nsInstanceId, TerminateNsRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateNetworkSliceInstanceValidateBeforeCall(nsInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
