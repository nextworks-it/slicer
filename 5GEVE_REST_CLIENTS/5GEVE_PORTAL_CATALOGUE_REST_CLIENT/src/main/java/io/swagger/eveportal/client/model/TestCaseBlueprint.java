/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.eveportal.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;

/**
 * TestCaseBlueprint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-26T20:09:54.213Z")



public class TestCaseBlueprint {
  @SerializedName("configurationScript")
  private String configurationScript = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("executionScript")
  private String executionScript = null;

  @SerializedName("infrastructureParameters")
  private Map<String, String> infrastructureParameters = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("resetConfigScript")
  private String resetConfigScript = null;

  @SerializedName("testcaseBlueprintId")
  private String testcaseBlueprintId = null;

  @SerializedName("userParameters")
  private Map<String, String> userParameters = null;

  @SerializedName("version")
  private String version = null;

  public TestCaseBlueprint configurationScript(String configurationScript) {
    this.configurationScript = configurationScript;
    return this;
  }

   /**
   * Get configurationScript
   * @return configurationScript
  **/
  @ApiModelProperty(value = "")
  public String getConfigurationScript() {
    return configurationScript;
  }

  public void setConfigurationScript(String configurationScript) {
    this.configurationScript = configurationScript;
  }

  public TestCaseBlueprint description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TestCaseBlueprint executionScript(String executionScript) {
    this.executionScript = executionScript;
    return this;
  }

   /**
   * Get executionScript
   * @return executionScript
  **/
  @ApiModelProperty(value = "")
  public String getExecutionScript() {
    return executionScript;
  }

  public void setExecutionScript(String executionScript) {
    this.executionScript = executionScript;
  }

  public TestCaseBlueprint infrastructureParameters(Map<String, String> infrastructureParameters) {
    this.infrastructureParameters = infrastructureParameters;
    return this;
  }

  public TestCaseBlueprint putInfrastructureParametersItem(String key, String infrastructureParametersItem) {
    if (this.infrastructureParameters == null) {
      this.infrastructureParameters = new HashMap<String, String>();
    }
    this.infrastructureParameters.put(key, infrastructureParametersItem);
    return this;
  }

   /**
   * Get infrastructureParameters
   * @return infrastructureParameters
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getInfrastructureParameters() {
    return infrastructureParameters;
  }

  public void setInfrastructureParameters(Map<String, String> infrastructureParameters) {
    this.infrastructureParameters = infrastructureParameters;
  }

  public TestCaseBlueprint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TestCaseBlueprint resetConfigScript(String resetConfigScript) {
    this.resetConfigScript = resetConfigScript;
    return this;
  }

   /**
   * Get resetConfigScript
   * @return resetConfigScript
  **/
  @ApiModelProperty(value = "")
  public String getResetConfigScript() {
    return resetConfigScript;
  }

  public void setResetConfigScript(String resetConfigScript) {
    this.resetConfigScript = resetConfigScript;
  }

  public TestCaseBlueprint testcaseBlueprintId(String testcaseBlueprintId) {
    this.testcaseBlueprintId = testcaseBlueprintId;
    return this;
  }

   /**
   * Get testcaseBlueprintId
   * @return testcaseBlueprintId
  **/
  @ApiModelProperty(value = "")
  public String getTestcaseBlueprintId() {
    return testcaseBlueprintId;
  }

  public void setTestcaseBlueprintId(String testcaseBlueprintId) {
    this.testcaseBlueprintId = testcaseBlueprintId;
  }

  public TestCaseBlueprint userParameters(Map<String, String> userParameters) {
    this.userParameters = userParameters;
    return this;
  }

  public TestCaseBlueprint putUserParametersItem(String key, String userParametersItem) {
    if (this.userParameters == null) {
      this.userParameters = new HashMap<String, String>();
    }
    this.userParameters.put(key, userParametersItem);
    return this;
  }

   /**
   * Get userParameters
   * @return userParameters
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getUserParameters() {
    return userParameters;
  }

  public void setUserParameters(Map<String, String> userParameters) {
    this.userParameters = userParameters;
  }

  public TestCaseBlueprint version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCaseBlueprint testCaseBlueprint = (TestCaseBlueprint) o;
    return Objects.equals(this.configurationScript, testCaseBlueprint.configurationScript) &&
        Objects.equals(this.description, testCaseBlueprint.description) &&
        Objects.equals(this.executionScript, testCaseBlueprint.executionScript) &&
        Objects.equals(this.infrastructureParameters, testCaseBlueprint.infrastructureParameters) &&
        Objects.equals(this.name, testCaseBlueprint.name) &&
        Objects.equals(this.resetConfigScript, testCaseBlueprint.resetConfigScript) &&
        Objects.equals(this.testcaseBlueprintId, testCaseBlueprint.testcaseBlueprintId) &&
        Objects.equals(this.userParameters, testCaseBlueprint.userParameters) &&
        Objects.equals(this.version, testCaseBlueprint.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationScript, description, executionScript, infrastructureParameters, name, resetConfigScript, testcaseBlueprintId, userParameters, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCaseBlueprint {\n");
    
    sb.append("    configurationScript: ").append(toIndentedString(configurationScript)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executionScript: ").append(toIndentedString(executionScript)).append("\n");
    sb.append("    infrastructureParameters: ").append(toIndentedString(infrastructureParameters)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resetConfigScript: ").append(toIndentedString(resetConfigScript)).append("\n");
    sb.append("    testcaseBlueprintId: ").append(toIndentedString(testcaseBlueprintId)).append("\n");
    sb.append("    userParameters: ").append(toIndentedString(userParameters)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

