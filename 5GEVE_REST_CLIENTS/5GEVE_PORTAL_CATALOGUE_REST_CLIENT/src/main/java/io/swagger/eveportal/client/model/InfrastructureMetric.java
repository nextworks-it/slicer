/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.eveportal.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InfrastructureMetric
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-10-26T20:09:54.213Z")



public class InfrastructureMetric {
  /**
   * Gets or Sets iMetricType
   */
  @JsonAdapter(IMetricTypeEnum.Adapter.class)
  public enum IMetricTypeEnum {
    USER_DATA_RATE_DOWNLINK("USER_DATA_RATE_DOWNLINK"),
    
    USER_DATA_RATE_UPLINK("USER_DATA_RATE_UPLINK"),
    
    CAPACITY("CAPACITY"),
    
    LATENCY_USERPLANE("LATENCY_USERPLANE"),
    
    LATENCY_CONTROLPLANE("LATENCY_CONTROLPLANE"),
    
    DEVICE_DENSITY("DEVICE_DENSITY"),
    
    MOBILITY("MOBILITY");

    private String value;

    IMetricTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IMetricTypeEnum fromValue(String text) {
      for (IMetricTypeEnum b : IMetricTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IMetricTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IMetricTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IMetricTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IMetricTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("iMetricType")
  private IMetricTypeEnum iMetricType = null;

  @SerializedName("interval")
  private String interval = null;

  /**
   * Gets or Sets metricCollectionType
   */
  @JsonAdapter(MetricCollectionTypeEnum.Adapter.class)
  public enum MetricCollectionTypeEnum {
    CUMULATIVE("CUMULATIVE"),
    
    DELTA("DELTA"),
    
    GAUGE("GAUGE");

    private String value;

    MetricCollectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricCollectionTypeEnum fromValue(String text) {
      for (MetricCollectionTypeEnum b : MetricCollectionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MetricCollectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricCollectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricCollectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MetricCollectionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("metricCollectionType")
  private MetricCollectionTypeEnum metricCollectionType = null;

  /**
   * Gets or Sets metricGraphType
   */
  @JsonAdapter(MetricGraphTypeEnum.Adapter.class)
  public enum MetricGraphTypeEnum {
    LINE("LINE"),
    
    PIE("PIE"),
    
    COUNTER("COUNTER"),
    
    GAUGE("GAUGE");

    private String value;

    MetricGraphTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricGraphTypeEnum fromValue(String text) {
      for (MetricGraphTypeEnum b : MetricGraphTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MetricGraphTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricGraphTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricGraphTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MetricGraphTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("metricGraphType")
  private MetricGraphTypeEnum metricGraphType = null;

  @SerializedName("metricId")
  private String metricId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("unit")
  private String unit = null;

  public InfrastructureMetric iMetricType(IMetricTypeEnum iMetricType) {
    this.iMetricType = iMetricType;
    return this;
  }

   /**
   * Get iMetricType
   * @return iMetricType
  **/
  @ApiModelProperty(value = "")
  public IMetricTypeEnum getIMetricType() {
    return iMetricType;
  }

  public void setIMetricType(IMetricTypeEnum iMetricType) {
    this.iMetricType = iMetricType;
  }

  public InfrastructureMetric interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @ApiModelProperty(value = "")
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }

  public InfrastructureMetric metricCollectionType(MetricCollectionTypeEnum metricCollectionType) {
    this.metricCollectionType = metricCollectionType;
    return this;
  }

   /**
   * Get metricCollectionType
   * @return metricCollectionType
  **/
  @ApiModelProperty(value = "")
  public MetricCollectionTypeEnum getMetricCollectionType() {
    return metricCollectionType;
  }

  public void setMetricCollectionType(MetricCollectionTypeEnum metricCollectionType) {
    this.metricCollectionType = metricCollectionType;
  }

  public InfrastructureMetric metricGraphType(MetricGraphTypeEnum metricGraphType) {
    this.metricGraphType = metricGraphType;
    return this;
  }

   /**
   * Get metricGraphType
   * @return metricGraphType
  **/
  @ApiModelProperty(value = "")
  public MetricGraphTypeEnum getMetricGraphType() {
    return metricGraphType;
  }

  public void setMetricGraphType(MetricGraphTypeEnum metricGraphType) {
    this.metricGraphType = metricGraphType;
  }

  public InfrastructureMetric metricId(String metricId) {
    this.metricId = metricId;
    return this;
  }

   /**
   * Get metricId
   * @return metricId
  **/
  @ApiModelProperty(value = "")
  public String getMetricId() {
    return metricId;
  }

  public void setMetricId(String metricId) {
    this.metricId = metricId;
  }

  public InfrastructureMetric name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InfrastructureMetric unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @ApiModelProperty(value = "")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfrastructureMetric infrastructureMetric = (InfrastructureMetric) o;
    return Objects.equals(this.iMetricType, infrastructureMetric.iMetricType) &&
        Objects.equals(this.interval, infrastructureMetric.interval) &&
        Objects.equals(this.metricCollectionType, infrastructureMetric.metricCollectionType) &&
        Objects.equals(this.metricGraphType, infrastructureMetric.metricGraphType) &&
        Objects.equals(this.metricId, infrastructureMetric.metricId) &&
        Objects.equals(this.name, infrastructureMetric.name) &&
        Objects.equals(this.unit, infrastructureMetric.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iMetricType, interval, metricCollectionType, metricGraphType, metricId, name, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfrastructureMetric {\n");
    
    sb.append("    iMetricType: ").append(toIndentedString(iMetricType)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    metricCollectionType: ").append(toIndentedString(metricCollectionType)).append("\n");
    sb.append("    metricGraphType: ").append(toIndentedString(metricGraphType)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

