- hosts: localhost
  connection: local
  debugger: on_failed
  gather_facts: yes
  vars_files:
    - ./vars/dependency_vars.yml
  tasks:

  #$ sudo apt install software-properties-common
  #$ sudo apt-add-repository --yes --update ppa:ansible/ansible
  #$ sudo apt install ansible

  #Start the playbook. Specify the mode in dependency_vars file
  # ansible-playbook <this_playbook> -K

  #To execute also the sebastian application set the start value (true) in dependency_vars file

  #To only execute the sebastian application, comment the mode variable

  - name: check mode
    debug:
      msg: "Accepted modes: [VSMF, NSMF, VSMF+NSMF]. Passed: {{ mode }}"
    when: mode is defined and not (mode == "VSMF" or mode != "NSMF" or mode != "VSMF+NSMF")

  - meta: end_play
    when: mode is defined and not (mode == "VSMF" or mode != "NSMF" or mode != "VSMF+NSMF")

  - include: dependencies-task.yml
    when: mode is defined or start is defined

  - name: start rabbitmq
    shell: service rabbitmq-server start || true
    become: yes

  - name: start postgresql
    shell: service postgresql start || true
    become: yes

  - include: vsmf-task.yml
    when: mode is defined and mode == "VSMF"

  - include: nsmf-task.yml
    when: mode is defined and mode == "NSMF"

  - include: total-task.yml
    when: mode is defined and mode == "VSMF+NSMF"

  - name: start rabbitmq
    shell: service rabbitmq-server stop || true
    become: yes
    when: start is not defined or start != "true"

  - name: start postgresql
    shell: service postgresql stop || true
    become: yes
    when: start is not defined or start != "true"

  - name: create log directory
    become: yes
    file:
      path: "{{ slicer_log }}"
      state: directory
    when: mode is defined

  #start
  - name: check postgresql
    shell: psql -lqt 2>/dev/null | cut -d \| -f 1 | grep -qw sebastian; echo $?
    become: yes
    become_user: postgres
    register: check_postgres
    when: start is defined and start == "true"

  - debug:
      msg: "{{ check_postgres.stdout }}"
    when:  start is defined and start == "true"

  - name: start postgresql
    shell: psql -c "ALTER USER postgres PASSWORD 'postgres';" && psql -c "CREATE DATABASE sebastian;" 2>/dev/null
    become: yes
    become_user: postgres
    when: start is defined and start == "true" and not check_postgres.stdout == "0"


  - name: check if application.properties already exist
    stat:
      path: "{{ slicer_folder }}/application.properties"
    register: check_app_properties
    when: start is defined and start == "true"

  - name: copy configuration file
    shell: cp application.properties {{ slicer_folder }}
    when: start is defined and start == "true" not check_app_properties.stat.exists
  
  - name: start VS in VSFM only mode
    shell: cd {{ slicer_folder }}/slicer/SEBASTIAN/VSMF_APP/target/ && java -jar VsmfCore-0.0.2-SNAPSHOT.jar  --spring.config.location={{slicer_folder}}/application.properties
    when: start is defined and start == "true" and mode == "VSMF"

  - name: start VS in NSFM only mode
    shell: cd {{ slicer_folder }}/slicer/SEBASTIAN/NSMF_APP/target/ && java -jar NsmfCore-0.0.2-SNAPSHOT.jar --spring.config.location={{slicer_folder}}/application.properties
    when: start is defined and start == "true" and mode == "NSMF"

  - name: start VS in VSFM+NSMF mode
    shell: cd {{ slicer_folder }}/slicer/SEBASTIAN/SEBASTIAN_CORE/target/ && java -jar SEBASTIAN_CORE-0.0.2-SNAPSHOT.jar  --spring.config.location={{slicer_folder}}/application.properties
    when: start is defined and start == "true" and mode == "VSMF+NSMF"

